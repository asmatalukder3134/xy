// in order to be able to cherry pick modules instead of using the full package, the paths must be separated
angular.module('Realize.ui.paths', ['Realize.core.configs.SCRIPT_PATH'])
    .provider('REALIZE_UI_ROOT_PATH', function() {
        return {
            $get: ['SCRIPT_PATH',
                function(SCRIPT_PATH) {
                    return SCRIPT_PATH + '/realize.ui';
                }
            ]
        };
    });

// not sure where this should go, TODO
angular.module('Realize.ui.keyCodes', [])
.constant('KEY_CODES', {
        TAB: 9,
        ENTER: 13,
        SHIFT: 16,
        CTRL: 17,
        ALT: 18,
        ESC: 27,
        SPACE: 32,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        CMD_LEFT: 91,
        CMD_RIGHT: 92
    });

// define module to house pre-cached templates
// in order to cherry pick, each module that has a (external) template should have this as a dependency
angular.module('Realize.ui.templates', ['Realize.ui.paths']);

// DEPRECATED convience bundle of complete package
angular.module('Realize.ui', [
    'Realize.ui.templates',
    'Realize.ui.paths',
    'Realize.ui.keyCodes',
    'Realize.ui.areaLoader',
    'Realize.ui.mediaIcon',
    'Realize.ui.modal',
    'Realize.ui.numberIcon',
    'Realize.ui.alert',
    'Realize.ui.alertService',
    'Realize.ui.inlineNotification',
    'Realize.ui.inlineAlertService',
    'Realize.ui.messageBasedAlert',
    'Realize.ui.quickLink',
    'Realize.ui.quickLinkMenu',
    'Realize.ui.qlClick',
    'Realize.ui.quickList',
    'Realize.ui.realizeFooter',
    'Realize.ui.tokenEnabledSrc',
    'Realize.ui.activeState',
    'Realize.ui.checkboxCustom',
    'Realize.ui.paginator'
]);
;/**
 * active-state.dir.js - directive to add a specified class to the element if the provided state is included in the current state
 */

angular.module('Realize.ui.activeState', ['ui.router'])
    .directive('activeState', [
        function() {
            return {

                restrict: 'A',

                scope: {
                    activeState: "@",
                    activeStateClass: "@?"
                },

                controller: ['$scope', '$element', '$state', function($scope, $element, $state) {

                    /*============ MODEL ============*/

                    // holds the current state we are attempting to go to
                    $scope.currentState = '';

                    // make sure we have an active state class that will be added to the element
                    var activeClass = $scope.activeStateClass || 'selected';


                    /*============ MODEL DEPENDENT METHODS ============*/

                    var currentStateIncludes = function (stateToCheck) {
                        var stateCheck = new RegExp('^' + stateToCheck,'gi');
                        return stateCheck.test($scope.currentState);
                    };

                    var reCalculateClass = function () {
                        if(currentStateIncludes($scope.activeState)) {
                            $element.addClass(activeClass);
                        } else {
                            $element.removeClass(activeClass);
                        }
                    };


                    /*============ LISTENERS ============*/

                    // listen and assume that this is the current state... if the resolver fails then we'll end up getting rerouted anyway
                    $scope.$on('$stateChangeStart', function (e, toRoute) {
                        $scope.currentState = toRoute.name;
                    });

                    // ui router does not actually fire this event (they should), so whenever we preventDefault on a state change we fire this ourselves
                    $scope.$on('$stateChangePrevented', function(event, toState, toParams, fromState, fromParams){
                        if(fromState && fromState.name) {
                            $scope.currentState = fromState.name;
                        }
                    });

                    // watch the current state to determine when we need to change the class
                    $scope.$watch('currentState', reCalculateClass);


                    /*============ INITIALIZATION ===========*/

                    // we miss the first $stateChangeStart so just grab the current state
                    $scope.currentState = $state.current.name;

                }]
            };
        }
    ]);;//
angular.module('Realize.ui.alert', [])
    .constant('ALERT_TTL', 5000)
    .directive('alert', [
        '$timeout',
        '$log',
        'ALERT_TTL',
        function($timeout, $log, ALERT_TTL) {
            return {
                // This directive allows use of angular bindings in message
                restrict: 'EA',
                replace: true,
                transclude: true,
                scope: {
                    alertType: '@',
                    alertOn: '='
                },
                template: '<div class="alert alert-{{alertType}} fade in" ng-transclude ng-show="alertOn"></div>',
                link: function(scope, el, attrs) {

                    function close() {
                        scope.$apply(function() {
                            scope.alertOn = false;
                        });
                    }

                    scope.$watch('alertOn', function(show) {
                        if (show && scope.$eval(attrs.autoClose)) {
                            $timeout(close, ALERT_TTL);
                        }
                    });

                    el.find('.close').on('click', close);

                    scope.$on('$destroy', function() {
                        el.find('.close').off('click');
                    });
                }
            };
        }
    ]);;angular.module('Realize.ui.alertService', [])
    .factory('AlertService', [
        '$rootScope',
        function($rootScope) {

            var service = {};

            service.alerts = [];

            //lifespan tracks how many pages we've traversed till we need to "pop" the alert
            //lifespan=1 means alert should be removed after navigating to another page
            //lifespan=2 means alert should be removed after changing routes twice
            service.addAlert = function(newAlertType, newAlertIcon, newAlertMsg, newAlertLifespan) {
                service.alerts.push({
                    type: newAlertType,
                    icon: newAlertIcon,
                    msg: newAlertMsg,
                    lifespan: newAlertLifespan
                });
            };

            service.alertIsSet = function() {
                return service.alerts[0] && service.alerts[0].msg !== "";
            };

            var removeAlert = function() {
                service.alerts.splice(0, 1);
            };

            $rootScope.$on("$routeChangeStart", function() {
                if (service.alerts[0] && service.alerts[0].lifespan) {

                    service.alerts[0].lifespan--;

                    if (service.alerts[0].lifespan <= 0) {
                        removeAlert();
                    }
                }
            });

            return service;
        }
    ]);;angular.module('Realize.ui.firstVisitAlert', [
    'Realize.ui.paths',
    'Realize.ui.templates',
    'Realize.core.filters.localize'
])
    .directive('firstVisitAlert', [
        '$log',
        'REALIZE_UI_ROOT_PATH',
        function($log, templatePath) {
            return {
                replace: true,
                scope: {
                    title: '=firstVisitAlert',
                    description: '=',
                    userClose: '=closeFn'
                },
                templateUrl: templatePath + '/alerts/firstVisitAlert.html',
                link: function(scope, el, attrs) {
                    scope.closeFn = function($event) {
                        if (angular.isFunction(scope.userClose)) {
                            scope.userClose.call(null, $event);
                        }
                    };
                }
            };
        }
    ]);;angular.module('Realize.ui.inlineAlertService', [])
    .factory('InlineAlertService', [
        '$log',
        function($log) {

            var service = {};

            service.alerts = [];

            service.addAlert = function(id, options) {

                $log.debug('addAlert: ', id, options);

                service.getAlert(id, true);

                var alert = {
                    id: id,
                    alert: options
                };

                service.alerts.push(alert);
            };

            service.getAlert = function(id, pop) {
                var exists;

                exists = _.find(
                    service.alerts,
                    function(alert) {
                        return alert.id === id;
                    }
                );

                if (pop && exists) {
                    service.removeAlert(exists);
                }

                return exists;
            };

            service.removeAlert = function(alert) {
                service.alerts.splice(service.alerts.indexOf(alert), 1);
            };

            return service;
        }
    ]);;angular.module('Realize.ui.inlineNotification', [
    'Realize.ui.inlineAlertService'
])
    .directive('inlineNotification', [
        '$log',
        '$timeout',
        'InlineAlertService',
        function($log, $timeout, InlineAlertService) {
            return {
                link: function(scope, el, attrs) {

                    var id = scope.$eval(attrs.inlineNotification),
                        target,
                        tpl = '<div class="success-message"></div>',
                        fadeTime = 4000;

                    function addNotification(notification) {
                        var $notification = angular.element(tpl).append(notification.alert.msg),
                            type = notification.alert.type;

                        $timeout(function() {
                            target = (attrs.inlineNotificationTarget) ? el.find(attrs.inlineNotificationTarget) : el;
                            el.addClass(type + 'Row');
                            if (!(el.hasClass('itemRow'))) {
                                el.parent().addClass(type + 'Row');
                            }
                            target.prepend($notification);
                        }, 1);

                        $timeout(function() {
                            var msg = target.find('.success-message');
                            msg.fadeOut(function() {
                                msg.remove();
                                el.removeClass(type + 'Row');
                                if (!(el.hasClass('itemRow'))) {
                                    el.parent().removeClass(type + 'Row');
                                }
                            });
                        }, fadeTime);
                    }

                    attrs.$observe('inlineNotification', function() {
                        id = scope.$eval(attrs.inlineNotification);
                    });

                    scope.$watch(
                        function() {
                            return InlineAlertService.getAlert(id, true);
                        },
                        function(newAlert) {
                            if (newAlert) {
                                $log.debug('new alert', newAlert);
                                addNotification(newAlert);
                            }
                        }
                    );
                }
            };
        }
    ]);;angular.module('Realize.ui.messageBasedAlert', [
    'Realize.ui.paths',
    'Realize.ui.templates',
    'Realize.ui.alertService'
])
// messageBasedAlert: applies bootstrap alert styling to given alert message
// @attr autoClose. Optional. (Boolean) specifies whether alert should fade out automatically
// @attr alertOn. Required. (Boolean) turns on alert
// @attr alertMessageDetails. Required. (Object) the object rendered by template '/partials/alert_template'.
// alertMessageDetails object must contain the properties: icon, type, and msg.
// To support localization, get translated text through Messages service

// Example:
// <div alert auto-close="true" alert-message-details="myAlertMessageDetails"></div>
.directive('messageBasedAlert', ['$timeout', '$rootScope', 'REALIZE_UI_ROOT_PATH', 'AlertService',
    function($timeout, $rootScope, templatePath, AlertService) {
        return {
            replace: true,
            scope: {
                autoClose: '=',
                alertMessageDetails: '=',
                alertOn: '='
            },
            templateUrl: templatePath + '/alerts/messageBasedAlert.html',
            link: function(scope, el) {
                var closeMe = function() {
                    scope.$apply(function() {
                        scope.alertOn = false;
                        scope.alertMessageDetails = null;

                        // Remove the alert after showing it
                        AlertService.alerts.splice(0, 1);
                    });
                };

                scope.$watch("alertMessageDetails", function() {
                    if (scope.alertMessageDetails && scope.autoClose) {
                        // Make sure element is visible after first alert hidden by fadeOut
                        el.show();
                        $timeout(function() {
                            el.fadeOut('slow', closeMe);
                        }, 5000);
                    }
                });

            }
        };
    }
]);;/**
 * area-loader.dir.js - directive for simple loader within an area
 */

angular.module('Realize.ui.areaLoader', [])
    .directive('areaLoader', [
        function() {
            return {
                restrict: 'EA',
                replace: true,
                template: [
                    '<div class="area-loader">',
                        '<i class="icon-spinner icon-spin"></i>',
                    '</div>'
                ].join('')
            };
        }
    ]);;// replaces standard checkbox form elements with custom skinning
// while remaining accessible to screen readers and keyboard users
// @attr label-id - identifies the element containing the label. used to populate aria-labelledby
// @attr label - text that describes the checkbox
// @attr ng-model - tracks the value of the checkbox

// Usage:
// <input type="checkbox" checkbox-custom ng-model="{foo}" labelid="{myId}" label="{myLabel}" >
//
angular.module('Realize.ui.checkboxCustom', [
    'Realize.ui.keyCodes'
])
    .directive('checkboxCustom', ['$log', 'KEY_CODES', function($log, KEY_CODES) {
        return {
            require: 'ngModel',
            template: function(tElem, tAttrs) {
                var template = [
                    '<div class="customCheckbox">',
                    '<i tabindex="0" class="customCheckboxInput" role="checkbox" aria-labelledby="', tAttrs.labelId,'" aria-checked="{{isChecked}}"></i>',
                    '<span id="', tAttrs.labelId,'" class="customCheckboxLabel">', tAttrs.label, '</span>',
                    '</div>'
                ].join('');

                return template;
            },
            replace: true,
            link: function (scope, el, attrs, ctrl) {
                scope.isChecked = scope.$eval(attrs.ngModel);

                var $customBox = el.find('i.customCheckboxInput'),
                    $label = el.find('span.customCheckboxLabel'),
                    toggleIcon,
                    toggleHandler,
                    classOn,
                    classOff;

                if (attrs.ngDisabled) {
                    attrs.$observe('ngDisabled', function(disabled) {
                        if (scope.$eval(disabled)) {
                            el.addClass('disabled');
                        } else {
                            el.removeClass('disabled');
                        }
                    });
                }

                classOn = attrs.classOn || 'icon-check';
                classOff = attrs.classOff || 'icon-check-empty';

                toggleIcon = function(value) {
                    $customBox.removeClass(value ? classOff : classOn).addClass(value ? classOn : classOff);
                };

                toggleHandler = function(event) {
                    if (event) {
                        event.preventDefault();
                        event.stopPropagation();
                    }

                    if (scope.$eval(attrs.ngDisabled)) { return; }

                    scope.isChecked = !ctrl.$viewValue;
                    ctrl.$setViewValue(scope.isChecked);

                    toggleIcon(ctrl.$viewValue);

                    scope.$apply(function(self) {
                        if (attrs.callback) {
                            self[attrs.callback](attrs.id, ctrl.$viewValue);
                        }
                    });
                };

                scope.$watch(attrs.ngModel, function(val, old) {
                    toggleIcon(val);
                });

                // create handler on $custombox to update the model
                $customBox.click(toggleHandler);
                $label.click(toggleHandler);

                $customBox.keydown(function(checkboxKeyEvent) {
                    if (checkboxKeyEvent.which === KEY_CODES.SPACE) {
                        checkboxKeyEvent.preventDefault();
                        toggleHandler();
                    }
                });
            }
        };
    }]);;angular.module('Realize.ui.dropdownA11y', ['Realize.core.services.browserInfo'])
    .directive('dropdownA11y', ['$log', 'KEY_CODES', '$timeout', 'BrowserInfo', function ($log, KEY_CODES, $timeout, BrowserInfo) {

        var hasPressed = function (event, keycode1) {
            var i;
            for(i = 1; i < arguments.length; i++) {
                if (event.which === arguments[i]) {
                    return true;
                }
            }
            return false;
        };

        return {
            restrict : 'A',
            link : function (scope, element, attrs) {
                var $menu = element.next('[role=menu]'),
                    focusableElements,
                    currentIndex,
                    focusedElement;

                var updateFocus = function (el) {
                    el.focus();
                    focusedElement = el;
                };

                var toggleMenu = function () {
                    element.click();
                };

                var focusFirstElement = function () {
                    // focusableElements = $menu.find(":focusable");
                    focusableElements = $menu.find('a[href], :input');
                    updateFocus(focusableElements.first());
                };

                var closeMenuAndFocusToggle = function () {
                    toggleMenu();
                    updateFocus(element);
                };

                var moveUp = function () {
                    currentIndex = focusableElements.index( element.parent().find(":focus") );
                    var isTopmostSelected = currentIndex === 0;
                    if (!isTopmostSelected) {
                        updateFocus(focusableElements.eq(currentIndex - 1));
                    } else{
                        updateFocus(focusableElements.eq(focusableElements.length-1));
                    }
                };

                var moveDown = function () {
                    currentIndex = focusableElements.index( element.parent().find(":focus") );
                    var isBottommostSelected = currentIndex === (focusableElements.length - 1);
                    if (!isBottommostSelected) {
                        updateFocus(focusableElements.eq(currentIndex + 1));
                    } else {
                        updateFocus(focusableElements.eq(0));
                    }
                };

                var makeSelection = function (menuEvent) {
                    var clickFn = focusedElement.attr('ng-click') || focusedElement.parent().attr('ql-click');

                    if (angular.isDefined(clickFn)) {
                        if( BrowserInfo.browser.isMSIE && BrowserInfo.browser.msieVersion <= 9 ) {
                            menuEvent.preventDefault();
                        }
                        focusedElement.scope().$apply(function () {
                            focusedElement.scope().$eval(clickFn);
                        });
                        updateFocus(element);
                    }
                };

                var toggleOnly = scope.$eval(attrs.ddA11yToggleOnly);

                element.keydown(function (menuLabelEvent) {
                    var downArrowKeyPressed =
                        hasPressed(menuLabelEvent, KEY_CODES.DOWN);
                    var enterOrSpaceKeyPressed =
                        hasPressed(menuLabelEvent, KEY_CODES.SPACE, KEY_CODES.ENTER);

                    if (enterOrSpaceKeyPressed) {
                        menuLabelEvent.preventDefault();
                        toggleMenu();
                    }

                    if (downArrowKeyPressed) {
                        menuLabelEvent.preventDefault();
                        if (!element.parent().hasClass("open")) {
                            toggleMenu();
                        }

                        // Realize specific 'loadingTools' from the contentViewer and programs.
                        if (angular.isDefined(scope.loadingTools) && scope.loadingTools) { // in case of lazy load tools items for Tools dropdown
                            scope.$watch('loadingTools', function (value) {
                                if (!value) {
                                    $timeout(function () {
                                        focusFirstElement();
                                    }, 0);
                                }
                            });
                        } else {
                            focusFirstElement();
                        }
                    }
                });

                $menu.find('a').attr('tabindex', -1);

                $menu.keydown(function (menuEvent) {
                    switch (menuEvent.which) {
                        case KEY_CODES.ESC:
                            menuEvent.preventDefault();
                            menuEvent.stopPropagation(); //prevents ESC from closing modal if dropdown was opened from modal
                            closeMenuAndFocusToggle();
                            break;

                        case KEY_CODES.UP:
                            if (toggleOnly) { break; }
                            menuEvent.preventDefault();
                            moveUp();
                            break;

                        case KEY_CODES.DOWN:
                            if (toggleOnly) { break; }
                            menuEvent.preventDefault();
                            moveDown();
                            break;

                        case KEY_CODES.ENTER:
                            if (toggleOnly) { break; }
                            if (angular.isDefined(focusedElement)) {
                                makeSelection(menuEvent);
                                $timeout(function () {
                                    return;
                                }, 0);
                            }

                            toggleMenu();

                            break;
                    }
                });
            }
        };
    }]);;angular.module('Realize.ui.dropdownToggle', [
    'Realize.ui.dropdownA11y',
    'ui.bootstrap.dropdown',
    'ui.bootstrap.tpls'
])
    .config(['$provide',
        function($provide) {
            $provide.decorator('dropdownToggleDirective', ['$delegate', '$document',
                function($delegate, $document) {

                    var directive = $delegate[0];
                    var openElement = null;
                    var closeMenu = angular.noop;

                    var newLink = function(scope, element, attrs) {

                        scope.$watch('$location.path', function() {
                            closeMenu();
                        });

                        element.parent().bind('click', function() {
                            closeMenu();
                        });

                        element.bind('click', function(event) {

                            var elementWasOpen = (element === openElement);

                            event.preventDefault();
                            event.stopPropagation();

                            if (!!openElement) {
                                closeMenu();
                            }

                            if (!elementWasOpen) {
                                $(".dropdown.open").removeClass("open"); //Close all other dd
                                element.parent().addClass('open');

                                element.parent().find('.dropdown-menu').attr({
                                    'aria-hidden': 'false',
                                    'aria-expanded': 'true'
                                });

                                openElement = element;
                                
                                closeMenu = function(event) {
                                    if (event) {
                                        event.preventDefault();
                                        event.stopPropagation();
                                    }

                                    $document.unbind('click', closeMenu);
                                    
                                    element.parent().removeClass('open');
                                    
                                    element.parent().find('.dropdown-menu').attr({
                                        'aria-hidden': 'true',
                                        'aria-expanded': 'false'
                                    });

                                    closeMenu = angular.noop;
                                    openElement = null;
                                };
                                
                                $document.bind('click', closeMenu);
                            }
                        });
                    };

                    directive.compile = function() {
                        return newLink;
                    };

                    return $delegate;
                }
            ]);
        }
    ]);;angular.module('Realize.ui.realizeFooter', [
    'Realize.ui.paths',
    'Realize.ui.templates',
    'Realize.core.filters.localize'
])
    .directive('realizeFooter', [
        'REALIZE_UI_ROOT_PATH',
        function(REALIZE_UI_ROOT_PATH) {
            return {
                restrict: 'EA',
                scope: {
                    BUILD_NUMBER: '@buildNumber',
                    SHOW_BUILD_NUMBER: '=showBuildNumber',
                    CREDITS: '@credits',
                    USER_AGREEMENT: '@userAgreement',
                    PRIVACY_POLICY: '@privacyPolicy'
                },
                replace: true,
                templateUrl: REALIZE_UI_ROOT_PATH + '/footer/realizeFooter.html'
            };
        }
    ]);;angular.module('Realize.ui.infoDropdown', [
    'Realize.ui.paths',
    'Realize.ui.templates'
])
    .directive('infoDropdown', [
        'REALIZE_UI_ROOT_PATH',
        function(REALIZE_UI_ROOT_PATH) {
            return {
                restrict: 'EA',
                replace: true,
                transclude: true,
                scope: {
                    infoDropdownTitleClosed: '@',
                    infoDropdownTitleOpen: '@',
                    infoDropdownHeader: '@',
                    initialState: '='
                },
                templateUrl: REALIZE_UI_ROOT_PATH + '/info-dropdown/info-dropdown.html',
                link: function(scope) {
                    /*============ MODEL ============*/
                    scope.isOpen = !!scope.initialState;

                    /*============ BEHAVIOR ============*/
                    scope.toggleOpen = function() {
                        scope.isOpen = !scope.isOpen;
                    };
                }
            };
        }
    ]);
;// display an icon for various assets based on media type
angular.module('Realize.ui.mediaIcon', [
    'Realize.ui.mediaIconFilter',
    'Realize.core.configs.MEDIA_PATH'
])
    .directive("mediaIcon", [
        '$log',
        '$filter',
        'MEDIA_PATH',
        function($log, $filter, MEDIA_PATH) {
            return {
                scope: true,
                replace: true,
                transclude: true,
                template: [
                    '<div class="mediaIcon with-tab" title="{{ content.$getTitle() }}">',
                        '<img ng-src="{{ src }}" alt="{{ content.mediaType }}" fallback-strategy="fallback" />',
                        '<span ng-transclude></span>',
                    '</div>'
                ].join(''),
                compile: function() {

                    var imagePath = MEDIA_PATH + '/skins/default/images',
                        defaultIcons = imagePath + '/default_icons';

                    return function(scope, element, attrs) {

                        scope.content = scope.$eval(attrs.mediaIcon);
                        scope.mediaType = $filter('mediaIcon')(scope.content);

                        if (!angular.isDefined(scope.mediaType)) {
                            if (scope.content.$isGooruItem && scope.content.$isGooruItem()) {
                                scope.src = defaultIcons + '/gooru_icon.png';
                            } else {
                                $log.error("Media type is undefined!", scope.content);
                            }
                            return;
                        }

                        element.addClass(scope.mediaType);

                        var iconPath = imagePath + '/mediatype/icon/',
                            custom = false,
                            customType = 'TIER',
                            large = element.hasClass('large'),
                            isTool = attrs.type === 'tool';

                        var setSource = function() {
                            var path = iconPath;
                            if (large) {
                                path += 'large/';
                            }

                            var src = path + scope.mediaType + '@2x.png',
                                size,
                                fallback;

                            if (isTool) {
                                element.removeClass('mediaIcon').removeClass('with-tab');
                                scope.fallback = [defaultIcons + '/tool@2x.png'];

                                src = scope.content.$getThumbnailUrl('TOOL', false);

                                if (!src || src === fallback) {
                                    src = scope.fallback.shift();
                                }

                                if (src.indexOf('@2x') > 0) {
                                    scope.fallback.unshift(src.replace('@2x', ''));
                                }

                                scope.src = src;
                                return;
                            }

                            if (scope.content.root) {
                                // program
                                if (attrs.type === 'dropdown') {
                                    fallback = defaultIcons + '/no_program_dropdown@2x.png';
                                    src = scope.content.$getThumbnailUrl('PROGRAM_SUBNAV');
                                } else if (attrs.type === 'course') {
                                    fallback = defaultIcons + '/no_program_thumb_course@2x.png';
                                    src = scope.content.$getThumbnailUrl('PROGRAM');
                                    element.removeClass('mediaIcon');
                                } else {
                                    size = large ? 'large' : 'small';
                                    fallback = defaultIcons + '/no_program_home' + size + '@2x.png';
                                    src = scope.content.$getThumbnailUrl('HOME', large);
                                }
                                element.removeClass('with-tab');
                            } else if (scope.mediaType === 'etext' && attrs.type === 'program') {
                                // etext program
                                fallback = defaultIcons + '/no_program_etext@2x.png';
                                src = scope.content.$getThumbnailUrl('ETEXT', false) || fallback;
                                element.removeClass('with-tab');
                            } else {
                                // all other media icons
                                if (scope.mediaType === 'interactive_media') {
                                    src = path + 'activity@2x.png';
                                } else if (scope.mediaType === 'selected_reading' || scope.mediaType === 'leveled_reader') {
                                    src = path + 'etext@2x.png';
                                } else if (scope.mediaType === 'center') {
                                    size = large ? '_grid' : '';
                                    src = path + 'center@2x.png';
                                } else if (scope.content.$isGooruItem && scope.content.$isGooruItem()) {
                                    src = defaultIcons + '/gooru_icon.png';
                                }

                                fallback = src;

                                if (scope.content.thumbnailUrls && scope.content.thumbnailUrls.length) {
                                    // TODO hard-coded(customType=Tier), $getThumbnailUrl needs to be improved
                                    // assume custom thumbnail is displayed small unless "large" attribute is true
                                    var customSrc = scope.content.$getThumbnailUrl(customType, attrs.large ? scope.$eval(attrs.large) : false);
                                    if (customSrc) {
                                        src = customSrc;

                                        element.removeClass('with-tab').removeClass('mediaIcon').addClass('customImage');
                                        custom = true;
                                    } else {
                                        // case: Either "List" or "Thumbnail" view having custom thumbnail
                                        // Then "customImage" class gets applied which is not getting removed if switch to another view
                                        // so again checking if no customSrc but class "customImage"
                                        if (element.hasClass('customImage')) {
                                            element.removeClass('customImage').addClass('mediaIcon').addClass('with-tab');
                                        }
                                    }
                                }
                            }

                            scope.fallback = [fallback];
                            scope.$on("imageFallback", function(event, fallbackEle) {
                                if (event.targetScope.content && !event.targetScope.content.$isGooruItem() && fallbackEle.parent().hasClass('customImage')) {
                                    fallbackEle.parent().addClass('mediaIcon with-tab fallback-applied');
                                }
                            });

                            if (!src || src === fallback) {
                                src = scope.fallback.shift();
                            }

                            if (src.indexOf('@2x') > 0) {
                                scope.fallback.unshift(src.replace('@2x', ''));
                            }

                            scope.src = src;
                        };

                        setSource();

                        attrs.$observe('large', function(val) {
                            // TODO hoping there's a better way to do this
                            // watching the large attribute for switching between small and
                            // large icon if view changes (e.g. via toggle)
                            large = scope.$eval(val);
                            if (large) {
                                element.addClass('large');
                            } else {
                                element.removeClass('large');
                            }
                            setSource();
                        });
                    };
                }
            };
        }
    ]);;angular.module('Realize.ui.mediaIconFilter', [
    'Realize.core.filters.underscores'
])
    .filter("mediaIcon", [
        '$filter',
        function($filter) {
            return function(input) {
                if (!angular.isDefined(input) || input === null ||
                    !angular.isDefined(input.mediaType) ||
                    !angular.isDefined(input.fileType)) {
                    return;
                }

                var mediaType = angular.lowercase(input.mediaType),
                    fileType = angular.lowercase(input.fileType);


                // is it a document?
                if (mediaType === 'document') {
                    if (fileType.indexOf("doc") !== -1) {
                        return "document";
                    }
                    if (fileType.indexOf("txt") !== -1) {
                        return "document";
                    }
                    if (fileType.indexOf("rtf") !== -1) {
                        return "document";
                    }
                    if (fileType.indexOf("ppt") !== -1) {
                        return "slideshow";
                    }
                    if (fileType.indexOf("pdf") !== -1) {
                        return "pdf";
                    }
                }

                // is it visual learning?
                if (input.contentType === "Visual Learning") {
                    return "visual_learning";
                }

                // is it remediation?
                if (mediaType.indexOf("remediation") !== -1) {
                    return "lesson";
                }

                // default to using the mediaType
                return $filter('underscores')(mediaType);
            };
        }
    ]);;/* Modal Dialog Service - handles the creation and destruction of modal dialogs */
angular.module('Realize.ui.modal', [
    'Realize.ui.templates',
    'Realize.ui.keyCodes',
    'Realize.core.services.messages',
    'Realize.core.configs.LOGOUT_URL',
    'Realize.core.filters.localize'
])
    .factory('ModalGet', ['$http', '$templateCache', '$q', '$log',
        function($http, $templateCache, $q, $log) {
            return function(dialogUrl) {
                var promise = $http.get(dialogUrl, {
                    cache: $templateCache
                }).then(function(response) {
                    $log.log('modal http', dialogUrl);
                    return response.data;
                }, function(err) {
                    $log.warn('[Modal] getModalHtml ERROR: ', err);
                    return $q.reject(err);
                });

                return promise;
            };
        }
    ])
    .factory('Modal', ['ModalGet', '$compile', '$log', '$timeout', 'Messages', 'REALIZE_UI_ROOT_PATH', '$q', '$rootScope', '$window', 'KEY_CODES', // TODO: explain KEY_CODES somewhere
        function(getModalHtml, $compile, $log, $timeout, Messages, templatePath, $q, $rootScope, $window, KEY_CODES) {

            // these make it a singleton
            var dialog = null,
                target = $('.modalRegion');

            // preload the progress dialog...
            getModalHtml(templatePath + "/modal/modal_progress.html");

            var destroyDialog = function() {
                // $log.log("destroyDialog: ", dialog);
                var deferred = $q.defer();

                if (angular.isElement(dialog)) {

                    // Hide and remove from DOM
                    dialog.addClass('hide');

                    $timeout(
                        function() {
                            dialog.modal('hide');
                            target.empty();
                            deferred.resolve();
                            $('.modal-backdrop').remove();
                        },
                        400
                    );

                    // TODO: this probably needs to be strengthened and moved to a manageModality function
                    // Restore keyboard access to links on the page

                    // restore global background items

                    $('#skipNav a').attr('tabindex', 1);
                    $('#globalNav .section a').attr('tabindex', 2);
                    $('#usernameDropdown').attr('tabindex', 5);
                    $('#globalSearch #SearchTextInput, #globalSearch button').attr('tabindex', 3);
                    $('#sectionNav a').removeAttr('tabindex', -1);
                    $('#footer a').removeAttr('tabindex', -1);
                    // restore dynamic background items
                    $('#sectionBody a, #sectionBody area, #sectionBody button, #sectionBody input, #sectionBody object, #sectionBody select, #sectionBody textarea').removeAttr('tabindex', -1);
                    $('#skipTarget, div.customCheckbox input[type="checkbox"]').attr('tabindex', -1);
                    $('body').children().removeAttr('aria-hidden', 'true');
                    $('.modalRegion').removeAttr('aria-hidden', 'false');
                    //$('.modal-backdrop').removeAttr('tabindex', -1);
                    $('.modal').off('hide');

                } else {
                    deferred.resolve();
                }

                return deferred.promise;
            };

            var showDialog = function(dialogUrl, scope) {
                return getModalHtml(dialogUrl).then(function(html) {

                    return destroyDialog().then(function() {
                        // Attach loaded template to the DOM
                        dialog = $(html);
                        target.hide().append(dialog);

                        // here we add Messages service to every scope
                        scope.getMessage = Messages.getMessage;

                        // register event before dialog call, as it will be fired during dialog call
                        dialog.on('shown', function() {
                            // compile the template in the provided scope
                            $compile(dialog)(scope);

                            $timeout(function() {
                                //TEMP HACK for 2.1 assignment modal issue
                                if (dialog.attr("id") === "assignmentModal" && dialog.find(".modal-header h1").length === 0) {
                                    $log.warn("AssignmentModal's scope is destoryed, not displaying modal");
                                    destroyDialog();
                                } else {
                                    //dialog.removeClass('hide');

                                    // add to our holder
                                    target.show();
                                }

                                $(dialog).find('[auto-focus=""]:visible').focus();

                            }, 10);

                            //custom ESC handler for closing modal
                            $(dialog).keydown(function(event) {
                                if (event.which === KEY_CODES.ESC) {
                                    destroyDialog();
                                }
                            });
                        });

                        // initialize the modal before passing it to angularjs so that the scope variables
                        // in the template get resolved
                        // e.g template is simple_dialog.jsp
                        // see more details in this task -
                        // https://rally1.rallydev.com/#/7278330890d/detail/task/10365036502
                        dialog.modal({
                            backdrop: 'static',
                            keyboard: false //disable default ESC handler
                        });

                        // TODO: this probably needs to be strengthened and moved to a manageModality
                        // function
                        // Prevent keyboard access to links in background by removing them from the tabindex
                        // array

                        // remove global background items
                        $('#skipNav a').attr('tabindex', -1);
                        $('#globalNav .section a').attr('tabindex', -1);
                        $('#usernameDropdown').attr('tabindex', -1);
                        $('#globalSearch #SearchTextInput, #globalSearch button').attr('tabindex', -1);
                        $('#sectionNav a').attr('tabindex', -1);
                        $('#footer a').attr('tabindex', -1);
                        // remove dynamic background items
                        $('#sectionBody a, #sectionBody area, #sectionBody button, #sectionBody input, #sectionBody object, #sectionBody select, #sectionBody textarea, #sectionBody a').attr('tabindex', -1);
                        $('body').children().attr('aria-hidden', 'true');
                        $('.modalRegion').attr('aria-hidden', 'false');
                        $('.modal-backdrop').attr('tabindex', -1);
                        // close options dropdown in tier thumbnail view
                        $('.quick-list-dropdown .open').removeClass('open');
                        $(dialog).on('hidden', function() {
                            scope.$broadcast('modal.hidden');
                        });

                        // the autoFocus directive did not have the desired effect. So, doing this hack.

                    }, function(err) {
                        $log.error('error destroying dialog', err);
                        return $q.reject(err);
                    });
                }, function(err) {
                    $log.error('error building dialog', err);
                    return $q.reject(err);
                });
            };

            /**
             * Removes modal dialog from DOM and destroys it
             */
            var hideDialog = function() {
                return destroyDialog();
            };

            /**
             * Creates a progress modal and returns the scope of the modal
             *
             * @param scope the scope to attach the progress properties to
             * @param progressObject map of progress properties, see partials/modal_progress
             */
            var progressDialog = function(scope, progressObject) {
                angular.forEach(progressObject, function(value, property) {
                    scope[property] = value;
                });

                // default: start at 0 an increment by 10% every 100 ms
                if (angular.isUndefined(scope.setProgress)) {
                    $log.log('[[ WARNING ]] progress-modal expecting a setProgress method, none found');
                    scope.setProgress = function(percent) {
                        scope.progressPercent = percent;
                    };
                }

                if (angular.isUndefined(scope.progressPercent)) {
                    scope.progressPercent = 0;
                }

                if (angular.isUndefined(scope.progressIncrement)) {
                    scope.progressIncrement = 10;
                }

                var timeout, fakeProgressPromise;
                scope.fakeProgress = function(desiredTimeout) {
                    timeout = desiredTimeout || 100;
                    $timeout(function fakeProgress() {
                        if (100 - (scope.progressPercent + scope.progressIncrement) > 0) {
                            scope.setProgress(scope.progressPercent + scope.progressIncrement);
                            fakeProgressPromise = $timeout(fakeProgress, timeout);
                        }
                    }, timeout);
                };

                scope.progressComplete = function(timeout) {
                    if (fakeProgressPromise) {
                        $timeout.cancel(fakeProgressPromise);
                    }
                    timeout = timeout || 1000;
                    scope.setProgress(100);
                    return {
                        then: function(callback) {
                            $timeout(callback, timeout);
                        }
                    };
                };

                var promise = showDialog(templatePath + '/modal/modal_progress.html', scope);
                promise.then(function() {
                    // successfully launched modal
                    return scope;
                }, function(err) {
                    $log.error('error building progress dialog', err);
                    return $q.reject(err);
                });

                // create pseudo promise for scoped actions after promise is fulfilled
                scope.then = function(fn) {
                    promise.then(fn);
                    return scope;
                };

                scope.close = function() {
                    hideDialog();
                };

                return scope;
            };

            var toolDialog = function(scope, selectedTool, titleFromMessageCode) {
                // avoid changes to the original item
                selectedTool = angular.copy(selectedTool);
                selectedTool.pages = selectedTool.previews || [];

                if (titleFromMessageCode) {
                    selectedTool.title = Messages.getCode(titleFromMessageCode);
                }

                var modalScope = scope.$new(true);
                modalScope.selectedTool = selectedTool;
                modalScope.currentPage = 1;
                modalScope.close = function() {
                    hideDialog().then(function() {
                        modalScope.$destroy();
                    });
                };
                modalScope.download = function(e, item) {
                    e.stopPropagation();
                    e.preventDefault();

                    if (item.restrictedDownloadContent.search(/download/gi) >= 0) {
                        $window.open(item.attachments[0].downloadURL, "_blank");
                    }
                };

                return showDialog(templatePath + '/modal/tool_popup_modal.html', modalScope);
            };

            // valid button type enum
            var BUTTONS = {
                OK: 'OK',
                CANCEL: 'CANCEL'
            };

            var showSimpleDialog = function(title, body, buttons, options) {
                // todo: merge in options? right now just id is used...
                options = options || {};

                var modalScope = $rootScope.$new(true),
                    suicide = function() {
                        hideDialog().then(function() {
                            modalScope.$destroy();
                        });
                    },
                    modalResult = $q.defer(),
                    promise = modalResult.promise,
                    modalButtons = [],
                    closeOK = false;

                // simple dialogs can only have 2 types of buttons, OK and/or Cancel
                // {title: ..., type: Modal.BUTTONS.OK, handler: fn}
                if (angular.isDefined(buttons) && angular.isObject(buttons)) {
                    var ok = buttons[BUTTONS.OK],
                        cancel = buttons[BUTTONS.CANCEL];

                    if (cancel && ok) {
                        promise = promise.then(ok.handler, cancel.handler);
                    } else if (cancel) {
                        promise = promise.then(null, cancel.handler);
                    } else if (ok) {
                        closeOK = true;
                        promise = promise.then(ok.handler, null);
                    }

                    if (cancel) {
                        modalButtons.push({
                            title: cancel.title ? Messages.getMessageOrDefault(cancel.title, cancel.title) : Messages.getMessageOrDefault('Cancel', 'Cancel'),
                            isDefault: !!cancel.isDefault,
                            clickHandler: function() {
                                modalResult.reject();
                            }
                        });
                    }

                    if (ok) {
                        modalButtons.push({
                            title: ok.title ? Messages.getMessageOrDefault(ok.title, ok.title) : Messages.getMessageOrDefault('Ok', 'Ok'),
                            isDefault: !!ok.isDefault,
                            clickHandler: function() {
                                modalResult.resolve();
                            }
                        });
                    }
                } else {
                    // default to having OK
                    closeOK = true;
                    modalButtons.push({
                        title: Messages.getMessageOrDefault('OK', 'OK'),
                        isDefault: true,
                        clickHandler: function() {
                            modalResult.resolve();
                        }
                    });
                }

                // always kill the modal in the end
                promise.then(suicide, suicide);

                if( angular.isDefined(options.id) ) {
                    modalScope.dialogId = options.id;
                }
                modalScope.title = Messages.getMessageOrDefault(title, title);
                modalScope.body = Messages.getMessageOrDefault(body, body);
                modalScope.closeBtnClickHandler = closeOK ? modalResult.resolve : modalResult.reject;
                modalScope.buttons = modalButtons;
                modalScope.isClosable = angular.isDefined(options.isClosable) ? options.isClosable : true;

                return showDialog(templatePath + "/modal/simple_dialog.html", modalScope);
            };

            // final factory object
            return {
                showDialog: showDialog,
                hideDialog: hideDialog,
                progressDialog: progressDialog,
                toolDialog: toolDialog,
                simpleDialog: showSimpleDialog,
                BUTTONS: BUTTONS
            };
        }
    ])
    .factory("SessionTimeoutModal", ['$rootScope', 'Modal', '$window', 'LOGOUT_URL', 'REALIZE_UI_ROOT_PATH',
        function($rootScope, Modal, $window, LOGOUT_URL, templatePath) {
            var template = templatePath + '/modal/session_timeout_dialog.html';

            var setTemplate = function(newTemplate) {
                template = newTemplate;
            };

            var onHidden = function() {
                $window.location.href = LOGOUT_URL;
            };

            var setOnHidden = function(newOnHiddenFn) {
                onHidden = newOnHiddenFn;
            };

            var showSessionTimeoutModal = function() {
                var scope = $rootScope.$new();

                scope.close = function($event) {
                    $event.stopPropagation();
                    $event.preventDefault();

                    Modal.hideDialog();
                };

                scope.$on('modal.hidden', onHidden);

                return Modal.showDialog(template, scope);
            };

            return {
                showDialog: showSessionTimeoutModal,
                setTemplate: setTemplate,
                setOnHidden: setOnHidden
            };
        }
    ]);
;/**
 * number-icon.dir.js - displays a number icon with other markup
 */

angular.module('Realize.ui.numberIcon', [])
    .directive('numberIcon', [function() {
            return {
                restrict: 'EA',
                transclude: true,
                replace: true,
                template: '<span class="number-icon"><span class="number-icon-number" ng-transclude></span></span>'
            };
        }
    ]);;angular.module('Realize.ui.paginatorStats', [
    'Realize.ui.paths',
    'Realize.ui.templates',
    'Realize.core.filters.localize'
])
    .directive('paginatorStats', [
        'REALIZE_UI_ROOT_PATH',
        function(REALIZE_UI_ROOT_PATH) {
            return {
                restrict: 'EA',
                templateUrl: REALIZE_UI_ROOT_PATH + '/paginator/paginator-stats.dir.html',
                replace: false,
                scope: {
                    total: "=",
                    page: "=",
                    limit: "="
                },
                link: function(scope) {
                    scope.$watch('total + page + limit', function() {
                        var total = parseInt(scope.total, 10),
                            page = parseInt(scope.page, 10),
                            limit = parseInt(scope.limit, 10);
                        scope.viewStartAt = (page - 1) * limit + 1;
                        scope.viewEndAt = Math.min(page * limit, total);
                        scope.viewTotal = total;
                    });
                }
            };
        }
    ]);;angular.module('Realize.ui.paginator', [
    'Realize.ui.paths',
    'Realize.ui.templates'
])
    .directive('paginator', [
        'REALIZE_UI_ROOT_PATH',
        function(REALIZE_UI_ROOT_PATH) {
            return {
                scope: {
                    page: '=',
                    total: '@',
                    limit: '@',
                    range: '@',
                    isToScrollUp: '@',
                    scrollTarget: '='
                },
                replace: false,
                templateUrl: REALIZE_UI_ROOT_PATH + '/paginator/paginator.dir.html',
                controller: [
                    '$scope',
                    '$element',
                    '$attrs',
                    '$timeout',
                    function($scope, $element, $attrs, $timeout) {

                        /**
                         * @method setPage
                         * @param pg {Integer}
                         */
                        $scope.setPage = function(pg) {
                            // Note: updateParentScopeValue is if page index isn't bound. Why would you do that?
                            // updateParentScopeValue($scope, $attrs.page, pg);

                            if ($element.attr('disabled')) {
                                return;
                            }

                            if ($scope.$emit('paginator.onBeforePageChange', pg, $scope.page).defaultPrevented) {
                                $scope.$emit('paginator.pageChangePrevented', pg, $scope.page);
                            } else {
                                $scope.page = pg;
                                if ($scope.isToScrollUp) {
                                    $('html, body').animate({
                                        scrollTop: $scope.scrollTarget && $scope.scrollTarget.offset() ? $scope.scrollTarget.offset().top : 0
                                    });
                                }
                                $scope.$emit('paginator.pageChangeSuccess', pg);
                            }
                        };

                        /**
                         * @method goFirst
                         * Goes to the first page.
                         */
                        $scope.goFirst = function() {
                            $scope.setPage(1);
                        };

                        /**
                         * @method goLast
                         * Go to the last page
                         */
                        $scope.goLast = function() {
                            $scope.setPage($scope.totalPages);
                        };

                        /**
                         * @method goNext
                         * Advance to the next page
                         * TODO: Check totalPages as max?
                         */
                        $scope.goNext = function() {
                            $scope.setPage($scope.page + 1);
                        };

                        /**
                         * @method goPrevious
                         * Go to previous page
                         * TODO: Check for non-negative integer
                         */
                        $scope.goPrevious = function() {
                            $scope.setPage($scope.page - 1);
                        };

                        /**
                         * @listener paginator.page.changed
                         * @param ev {Object} - event
                         * @param page {Integer} - page number
                         */
                        $scope.$on('paginator.page.changed', function(ev, page) {
                            $scope.setPage(page);
                        });

                        /**
                         * @method calcVisibleRange
                         * @private
                         * @param page {Integer}
                         * @param totalPages {Integer}
                         * @param count {Integer}
                         * @returns {Array}
                         */
                        function calcVisibleRange(page, totalPages, count) {
                            var start = 1;

                            if (totalPages > count) {
                                start = page - Math.floor(count / 2);

                                // note: can be two ternaries, but left expanded for clarity
                                if (page < count || page > totalPages - count) {
                                    if ((page > totalPages - Math.ceil(count / 2))) {
                                        start = totalPages - count;
                                    } else if (page < Math.ceil(count / 2)) {
                                        start = 1;
                                    }
                                }
                            }

                            return _.range(start || 1, Math.min(start + count, totalPages) + 1);
                        }

                        /**
                         * @listener 'total + page'
                         * When the total or page number change, update totalPages and visibleRange.
                         */
                        $scope.$watch('total + page', function() {
                            if (!isNaN($scope.total) && !isNaN($scope.limit) && !isNaN($scope.page)) {
                                $scope.totalPages = parseInt(Math.ceil($scope.total / $scope.limit), 10);
                                $scope.visibleRange = calcVisibleRange($scope.page, $scope.totalPages, 10);
                            }
                        });

                    }
                ]
            };
        }
    ]);;angular.module('Realize.ui.qlClick', [])
// since quicklinks must exist inside a quick-list, clicks should happen in parent scope
.directive("qlClick", ['$parse',
    function($parse) {
        return {
            link: function(scope, el, attrs) {
                var fn = $parse(attrs.qlClick);

                el.on('click', function(e) {
                    fn(scope.$parent, {
                        $event: e
                    });
                    if (!scope.$$phase && !scope.$root.$$phase) {
                        scope.$apply();
                    }
                });

                // TODO: need destroy handler?
            }
        };
    }
]);
;angular.module('Realize.ui.quickLink', [])
    .directive("quickLink", ['$log',
        function($log) {
            return {
                template: '<li class="quick-link"><a href="javascript://"><i class="icon-{{ icon }}"></i>{{ text }}</a></li>',
                replace: true,
                scope: true,
                link: function(scope, el, attrs) {

                    if (el.parent().attr('role') === "menu") {
                        el.find('a').attr('role', 'menuitem');
                    }

                    // carry along href to link if provided
                    attrs.$observe('href', function() {
                        if (attrs.href !== '') {
                            el.find('a').attr('href', attrs.href);
                            if (attrs.target) {
                                el.find('a').attr('target', attrs.target);
                            }
                        }
                    });

                    //default to false if ng-hide or ng-show are undefined
                    scope.hidden = scope.$eval(attrs.ngHide) || angular.isDefined(attrs.ngShow) ? !scope.$eval(attrs.ngShow) : false;
                    scope.icon = attrs.icon;
                    scope.$watch(attrs.text, function(text) {
                        scope.text = text;
                    });

                    scope.$watch(attrs.ngHide, function(val, old) {
                        if (angular.isDefined(val) && val !== old) {
                            scope.hidden = !!val;
                            el.parent().trigger('quicklinkDisplayChange');
                        }
                    });

                    scope.$watch(attrs.ngShow, function(val, old) {
                        if (angular.isDefined(val) && val !== old) {
                            scope.hidden = !!!val;
                            el.parent().trigger('quicklinkDisplayChange');
                        }
                    });
                }
            };
        }
    ]);;angular.module('Realize.ui.quickLinkMenu', [])
    .directive('quickLinkMenu', ['$log',
        function($log) {
            var tmpl = [
                '<li>',
                    '<a ng-click="toggleClick($event);" class="dropdown-toggle" role="button" dropdown-a11y href="javascript://">',
                        '<i class="icon-{{ toggleIcon }}"></i>{{ toggleText }}<i class="icon-caret-{{ toggleDirection }}"></i>',
                    '</a>',
                    '<ul class="dropdown-menu pull-right quick-link-menu-items" role="menu" ng-transclude></ul>',
                '</li>'
            ].join('');

            return {
                template: tmpl,
                replace: true,
                scope: true,
                transclude: true,
                link: function(scope, el, attrs) {
                    var options = scope.$eval(attrs.quickLinkMenu);
                    //$log.log('QLM Options', options);

                    scope.toggleIcon = options.icon;
                    scope.toggleText = options.text;
                    scope.toggleDirection = options.direction;

                    scope.toggleClick = function(e) {
                        if (options.toggleClick && angular.isFunction(options.toggleClick)) {
                            options.toggleClick.call(null, e);
                        }
                    };

                    // template modifications based on passed params
                    if (!scope.toggleIcon) {
                        el.find('> a i:first').remove();
                    }

                    // cache the contents of the menu
                    var items = el.find('.quick-link-menu-items').children();

                    // when a parent list converts, need to convert to just items
                    scope.$on('collapse', function() {
                        //$log.log('collapse event!', items);
                        el.after(items);
                        el.hide();
                    });

                    scope.$on('expand', function() {
                        //$log.log('expand event');
                        el.find('.quick-link-menu-items').append(items);
                        el.css('display', 'inline-block');
                    });
                }
            };
        }
    ]);
;angular.module('Realize.ui.quickList', [])
    .directive('quickList', ['$log', '$parse', '$compile',
        function($log, $parse, $compile) {
            return {
                restrict: 'AE',
                template: '<ul class="quicklinks" ng-transclude></ul>',
                replace: true,
                transclude: true,
                controller: ['$scope', '$element',
                    function($scope, $element) {
                        var ctrl = this;

                        ctrl.$visibleChildCount = 0;

                        ctrl.$calcVisibleChildren = function() {
                            ctrl.$visibleChildCount = 0;
                            angular.forEach($element.children('.quick-link'), function(li) {
                                var link = angular.element(li),
                                    childScope = link.scope();

                                if (childScope.hidden === false) {
                                    ctrl.$visibleChildCount++;
                                }
                            });

                            //$log.log('calc', visibleChildCount, el);
                        };
                    }
                ],
                link: function(scope, el, attrs, ctrl) {
                    scope.menuDirection = scope.$eval(attrs.isdropup) ? "dropup" : "dropdown";
                    scope.caretDirection = scope.$eval(attrs.isdropup) ? "icon-caret-up" : "icon-caret-down";
                    // This feels dirty.  Hate it. But, for collapsed mode, the only visible markup is generated so there is
                    // no easy way to mark the li you need to click on to display the dropdown.  Not a huge
                    // problem if you only have 1 quick-list in a row, but if you have multiple, the only other
                    // option is to use :eq() style selectors in your tests.  So, provide a way to add an e2e selector
                    var e2eId = angular.isDefined(attrs.e2eId) ? ' data-e2e-id="' + attrs.e2eId + '"' : '',
                        // support ng-show, ng-hide on the quick-list.  If we ever make this directive create it's own
                        // isolate scope, this will most likely need to be changed, but for now, works ok.
                        ngShow = angular.isDefined(attrs.ngShow) ? ' ng-show="' + attrs.ngShow + '"' : '',
                        ngHide = angular.isDefined(attrs.ngHide) ? ' ng-hide="' + attrs.ngHide + '"' : '',
                        tmpl = [
                            '<ul class="quick-list-dropdown quicklinks"' + ngShow + ngHide + '>',
                                '<li class="quick-list-dropdown-trigger {{ menuDirection }}"' + e2eId + '>',
                                    '<a href="javascript://" class="dropdown-toggle" data-toggle="dropdown" role="button">',
                                        '<i class="icon-', attrs.collapsedIcon, '"></i>', attrs.collapsedLabel, '<i class="{{ caretDirection }}"></i>',
                                    '</a>',
                                    // quicklinks get injected here...
                                '</li>',
                            '</ul>'
                        ].join(''),
                        collapsed = false;

                    scope.$watch(attrs.isdropup, function(attrDropUp, old) {
                        if (angular.isDefined(attrDropUp) && attrDropUp === old) {
                            return;
                        }
                        scope.menuDirection = attrDropUp ? "dropup" : "dropdown";
                        scope.caretDirection = attrDropUp ? "icon-caret-up" : "icon-caret-down";
                    });

                    function doCollapse() {
                        var $wrapper = $(tmpl);
                        $compile($wrapper)(scope);
                        //$log.log('$wrapper', $wrapper);
                        el.after($wrapper).removeClass('quicklinks').addClass('dropdown-menu').appendTo($wrapper.find('li'));
                        //$wrapper.find('.dropdown-toggle').dropdown();

                        //$log.log('quickList collapse', el);
                        collapsed = true;
                        scope.$broadcast('collapse');
                        //$log.log('doCollapse', visibleChildCount);
                    }

                    function doExpand() {
                        // unwrap it
                        var wrapper = el.parents('ul.quick-list-dropdown');
                        if (wrapper.length > 0) {
                            wrapper.after(el);
                            wrapper.remove();
                            el.removeClass('dropdown-menu').addClass('quicklinks');
                        }

                        //$log.log('quickList expand', el);
                        collapsed = false;
                        scope.$broadcast('expand');
                    }

                    ctrl.$calcVisibleChildren();

                    el.on('quicklinkDisplayChange', function() {
                        var collapsedFn = $parse(attrs.collapsed);
                        ctrl.$calcVisibleChildren();

                        if (ctrl.$visibleChildCount <= 1) {
                            //$log.log('I should expand!', collapsed, ctrl, el[0]);
                            doExpand();

                        } else if (collapsedFn()) {
                            // if enough items become visible and if attrs.collapsed is truthy,
                            // revert to displaying the collapsed form.
                            doCollapse();
                        }
                    });

                    scope.$watch(attrs.collapsed, function(attrCollapsed, old) {
                        if (angular.isUndefined(attrCollapsed) || angular.isUndefined(old)) {
                            return;
                        }

                        ctrl.$calcVisibleChildren();
                        if (!collapsed && attrCollapsed && ctrl.$visibleChildCount > 1) {
                            doCollapse();
                        } else if (collapsed) {
                            doExpand();
                        }
                    });
                }
            };
        }
    ]);;// in order to be able to cherry pick modules instead of using the full package, the paths must be separated
angular.module('Realize.ui.paths', ['Realize.core.configs.SCRIPT_PATH'])
    .provider('REALIZE_UI_ROOT_PATH', function() {
        return {
            $get: ['SCRIPT_PATH',
                function(SCRIPT_PATH) {
                    return SCRIPT_PATH + '/realize.ui';
                }
            ]
        };
    });

// not sure where this should go, TODO
angular.module('Realize.ui.keyCodes', [])
.constant('KEY_CODES', {
        TAB: 9,
        ENTER: 13,
        SHIFT: 16,
        CTRL: 17,
        ALT: 18,
        ESC: 27,
        SPACE: 32,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        CMD_LEFT: 91,
        CMD_RIGHT: 92
    });

// define module to house pre-cached templates
// in order to cherry pick, each module that has a (external) template should have this as a dependency
angular.module('Realize.ui.templates', ['Realize.ui.paths']);

// DEPRECATED convience bundle of complete package
angular.module('Realize.ui', [
    'Realize.ui.templates',
    'Realize.ui.paths',
    'Realize.ui.keyCodes',
    'Realize.ui.areaLoader',
    'Realize.ui.mediaIcon',
    'Realize.ui.modal',
    'Realize.ui.numberIcon',
    'Realize.ui.alert',
    'Realize.ui.alertService',
    'Realize.ui.inlineNotification',
    'Realize.ui.inlineAlertService',
    'Realize.ui.messageBasedAlert',
    'Realize.ui.quickLink',
    'Realize.ui.quickLinkMenu',
    'Realize.ui.qlClick',
    'Realize.ui.quickList',
    'Realize.ui.realizeFooter',
    'Realize.ui.tokenEnabledSrc',
    'Realize.ui.activeState',
    'Realize.ui.checkboxCustom',
    'Realize.ui.paginator'
]);
;/**
 * active-state.dir.js - directive to add a specified class to the element if the provided state is included in the current state
 */

angular.module('Realize.ui.activeState', ['ui.router'])
    .directive('activeState', [
        function() {
            return {

                restrict: 'A',

                scope: {
                    activeState: "@",
                    activeStateClass: "@?"
                },

                controller: ['$scope', '$element', '$state', function($scope, $element, $state) {

                    /*============ MODEL ============*/

                    // holds the current state we are attempting to go to
                    $scope.currentState = '';

                    // make sure we have an active state class that will be added to the element
                    var activeClass = $scope.activeStateClass || 'selected';


                    /*============ MODEL DEPENDENT METHODS ============*/

                    var currentStateIncludes = function (stateToCheck) {
                        var stateCheck = new RegExp('^' + stateToCheck,'gi');
                        return stateCheck.test($scope.currentState);
                    };

                    var reCalculateClass = function () {
                        if(currentStateIncludes($scope.activeState)) {
                            $element.addClass(activeClass);
                        } else {
                            $element.removeClass(activeClass);
                        }
                    };


                    /*============ LISTENERS ============*/

                    // listen and assume that this is the current state... if the resolver fails then we'll end up getting rerouted anyway
                    $scope.$on('$stateChangeStart', function (e, toRoute) {
                        $scope.currentState = toRoute.name;
                    });

                    // ui router does not actually fire this event (they should), so whenever we preventDefault on a state change we fire this ourselves
                    $scope.$on('$stateChangePrevented', function(event, toState, toParams, fromState, fromParams){
                        if(fromState && fromState.name) {
                            $scope.currentState = fromState.name;
                        }
                    });

                    // watch the current state to determine when we need to change the class
                    $scope.$watch('currentState', reCalculateClass);


                    /*============ INITIALIZATION ===========*/

                    // we miss the first $stateChangeStart so just grab the current state
                    $scope.currentState = $state.current.name;

                }]
            };
        }
    ]);;//
angular.module('Realize.ui.alert', [])
    .constant('ALERT_TTL', 5000)
    .directive('alert', [
        '$timeout',
        '$log',
        'ALERT_TTL',
        function($timeout, $log, ALERT_TTL) {
            return {
                // This directive allows use of angular bindings in message
                restrict: 'EA',
                replace: true,
                transclude: true,
                scope: {
                    alertType: '@',
                    alertOn: '='
                },
                template: '<div class="alert alert-{{alertType}} fade in" ng-transclude ng-show="alertOn"></div>',
                link: function(scope, el, attrs) {

                    function close() {
                        scope.$apply(function() {
                            scope.alertOn = false;
                        });
                    }

                    scope.$watch('alertOn', function(show) {
                        if (show && scope.$eval(attrs.autoClose)) {
                            $timeout(close, ALERT_TTL);
                        }
                    });

                    el.find('.close').on('click', close);

                    scope.$on('$destroy', function() {
                        el.find('.close').off('click');
                    });
                }
            };
        }
    ]);;angular.module('Realize.ui.alertService', [])
    .factory('AlertService', [
        '$rootScope',
        function($rootScope) {

            var service = {};

            service.alerts = [];

            //lifespan tracks how many pages we've traversed till we need to "pop" the alert
            //lifespan=1 means alert should be removed after navigating to another page
            //lifespan=2 means alert should be removed after changing routes twice
            service.addAlert = function(newAlertType, newAlertIcon, newAlertMsg, newAlertLifespan) {
                service.alerts.push({
                    type: newAlertType,
                    icon: newAlertIcon,
                    msg: newAlertMsg,
                    lifespan: newAlertLifespan
                });
            };

            service.alertIsSet = function() {
                return service.alerts[0] && service.alerts[0].msg !== "";
            };

            var removeAlert = function() {
                service.alerts.splice(0, 1);
            };

            $rootScope.$on("$routeChangeStart", function() {
                if (service.alerts[0] && service.alerts[0].lifespan) {

                    service.alerts[0].lifespan--;

                    if (service.alerts[0].lifespan <= 0) {
                        removeAlert();
                    }
                }
            });

            return service;
        }
    ]);;angular.module('Realize.ui.firstVisitAlert', [
    'Realize.ui.paths',
    'Realize.ui.templates',
    'Realize.core.filters.localize'
])
    .directive('firstVisitAlert', [
        '$log',
        'REALIZE_UI_ROOT_PATH',
        function($log, templatePath) {
            return {
                replace: true,
                scope: {
                    title: '=firstVisitAlert',
                    description: '=',
                    userClose: '=closeFn'
                },
                templateUrl: templatePath + '/alerts/firstVisitAlert.html',
                link: function(scope, el, attrs) {
                    scope.closeFn = function($event) {
                        if (angular.isFunction(scope.userClose)) {
                            scope.userClose.call(null, $event);
                        }
                    };
                }
            };
        }
    ]);;angular.module('Realize.ui.inlineAlertService', [])
    .factory('InlineAlertService', [
        '$log',
        function($log) {

            var service = {};

            service.alerts = [];

            service.addAlert = function(id, options) {

                $log.debug('addAlert: ', id, options);

                service.getAlert(id, true);

                var alert = {
                    id: id,
                    alert: options
                };

                service.alerts.push(alert);
            };

            service.getAlert = function(id, pop) {
                var exists;

                exists = _.find(
                    service.alerts,
                    function(alert) {
                        return alert.id === id;
                    }
                );

                if (pop && exists) {
                    service.removeAlert(exists);
                }

                return exists;
            };

            service.removeAlert = function(alert) {
                service.alerts.splice(service.alerts.indexOf(alert), 1);
            };

            return service;
        }
    ]);;angular.module('Realize.ui.inlineNotification', [
    'Realize.ui.inlineAlertService'
])
    .directive('inlineNotification', [
        '$log',
        '$timeout',
        'InlineAlertService',
        function($log, $timeout, InlineAlertService) {
            return {
                link: function(scope, el, attrs) {

                    var id = scope.$eval(attrs.inlineNotification),
                        target,
                        tpl = '<div class="success-message"></div>',
                        fadeTime = 4000;

                    function addNotification(notification) {
                        var $notification = angular.element(tpl).append(notification.alert.msg),
                            type = notification.alert.type;

                        $timeout(function() {
                            target = (attrs.inlineNotificationTarget) ? el.find(attrs.inlineNotificationTarget) : el;
                            el.addClass(type + 'Row');
                            if (!(el.hasClass('itemRow'))) {
                                el.parent().addClass(type + 'Row');
                            }
                            target.prepend($notification);
                        }, 1);

                        $timeout(function() {
                            var msg = target.find('.success-message');
                            msg.fadeOut(function() {
                                msg.remove();
                                el.removeClass(type + 'Row');
                                if (!(el.hasClass('itemRow'))) {
                                    el.parent().removeClass(type + 'Row');
                                }
                            });
                        }, fadeTime);
                    }

                    attrs.$observe('inlineNotification', function() {
                        id = scope.$eval(attrs.inlineNotification);
                    });

                    scope.$watch(
                        function() {
                            return InlineAlertService.getAlert(id, true);
                        },
                        function(newAlert) {
                            if (newAlert) {
                                $log.debug('new alert', newAlert);
                                addNotification(newAlert);
                            }
                        }
                    );
                }
            };
        }
    ]);;angular.module('Realize.ui.messageBasedAlert', [
    'Realize.ui.paths',
    'Realize.ui.templates',
    'Realize.ui.alertService'
])
// messageBasedAlert: applies bootstrap alert styling to given alert message
// @attr autoClose. Optional. (Boolean) specifies whether alert should fade out automatically
// @attr alertOn. Required. (Boolean) turns on alert
// @attr alertMessageDetails. Required. (Object) the object rendered by template '/partials/alert_template'.
// alertMessageDetails object must contain the properties: icon, type, and msg.
// To support localization, get translated text through Messages service

// Example:
// <div alert auto-close="true" alert-message-details="myAlertMessageDetails"></div>
.directive('messageBasedAlert', ['$timeout', '$rootScope', 'REALIZE_UI_ROOT_PATH', 'AlertService',
    function($timeout, $rootScope, templatePath, AlertService) {
        return {
            replace: true,
            scope: {
                autoClose: '=',
                alertMessageDetails: '=',
                alertOn: '='
            },
            templateUrl: templatePath + '/alerts/messageBasedAlert.html',
            link: function(scope, el) {
                var closeMe = function() {
                    scope.$apply(function() {
                        scope.alertOn = false;
                        scope.alertMessageDetails = null;

                        // Remove the alert after showing it
                        AlertService.alerts.splice(0, 1);
                    });
                };

                scope.$watch("alertMessageDetails", function() {
                    if (scope.alertMessageDetails && scope.autoClose) {
                        // Make sure element is visible after first alert hidden by fadeOut
                        el.show();
                        $timeout(function() {
                            el.fadeOut('slow', closeMe);
                        }, 5000);
                    }
                });

            }
        };
    }
]);;/**
 * area-loader.dir.js - directive for simple loader within an area
 */

angular.module('Realize.ui.areaLoader', [])
    .directive('areaLoader', [
        function() {
            return {
                restrict: 'EA',
                replace: true,
                template: [
                    '<div class="area-loader">',
                        '<i class="icon-spinner icon-spin"></i>',
                    '</div>'
                ].join('')
            };
        }
    ]);;// replaces standard checkbox form elements with custom skinning
// while remaining accessible to screen readers and keyboard users
// @attr label-id - identifies the element containing the label. used to populate aria-labelledby
// @attr label - text that describes the checkbox
// @attr ng-model - tracks the value of the checkbox

// Usage:
// <input type="checkbox" checkbox-custom ng-model="{foo}" labelid="{myId}" label="{myLabel}" >
//
angular.module('Realize.ui.checkboxCustom', [
    'Realize.ui.keyCodes'
])
    .directive('checkboxCustom', ['$log', 'KEY_CODES', function($log, KEY_CODES) {
        return {
            require: 'ngModel',
            template: function(tElem, tAttrs) {
                var template = [
                    '<div class="customCheckbox">',
                    '<i tabindex="0" class="customCheckboxInput" role="checkbox" aria-labelledby="', tAttrs.labelId,'" aria-checked="{{isChecked}}"></i>',
                    '<span id="', tAttrs.labelId,'" class="customCheckboxLabel">', tAttrs.label, '</span>',
                    '</div>'
                ].join('');

                return template;
            },
            replace: true,
            link: function (scope, el, attrs, ctrl) {
                scope.isChecked = scope.$eval(attrs.ngModel);

                var $customBox = el.find('i.customCheckboxInput'),
                    $label = el.find('span.customCheckboxLabel'),
                    toggleIcon,
                    toggleHandler,
                    classOn,
                    classOff;

                if (attrs.ngDisabled) {
                    attrs.$observe('ngDisabled', function(disabled) {
                        if (scope.$eval(disabled)) {
                            el.addClass('disabled');
                        } else {
                            el.removeClass('disabled');
                        }
                    });
                }

                classOn = attrs.classOn || 'icon-check';
                classOff = attrs.classOff || 'icon-check-empty';

                toggleIcon = function(value) {
                    $customBox.removeClass(value ? classOff : classOn).addClass(value ? classOn : classOff);
                };

                toggleHandler = function(event) {
                    if (event) {
                        event.preventDefault();
                        event.stopPropagation();
                    }

                    if (scope.$eval(attrs.ngDisabled)) { return; }

                    scope.isChecked = !ctrl.$viewValue;
                    ctrl.$setViewValue(scope.isChecked);

                    toggleIcon(ctrl.$viewValue);

                    scope.$apply(function(self) {
                        if (attrs.callback) {
                            self[attrs.callback](attrs.id, ctrl.$viewValue);
                        }
                    });
                };

                scope.$watch(attrs.ngModel, function(val, old) {
                    toggleIcon(val);
                });

                // create handler on $custombox to update the model
                $customBox.click(toggleHandler);
                $label.click(toggleHandler);

                $customBox.keydown(function(checkboxKeyEvent) {
                    if (checkboxKeyEvent.which === KEY_CODES.SPACE) {
                        checkboxKeyEvent.preventDefault();
                        toggleHandler();
                    }
                });
            }
        };
    }]);;angular.module('Realize.ui.dropdownA11y', ['Realize.core.services.browserInfo'])
    .directive('dropdownA11y', ['$log', 'KEY_CODES', '$timeout', 'BrowserInfo', function ($log, KEY_CODES, $timeout, BrowserInfo) {

        var hasPressed = function (event, keycode1) {
            var i;
            for(i = 1; i < arguments.length; i++) {
                if (event.which === arguments[i]) {
                    return true;
                }
            }
            return false;
        };

        return {
            restrict : 'A',
            link : function (scope, element, attrs) {
                var $menu = element.next('[role=menu]'),
                    focusableElements,
                    currentIndex,
                    focusedElement;

                var updateFocus = function (el) {
                    el.focus();
                    focusedElement = el;
                };

                var toggleMenu = function () {
                    element.click();
                };

                var focusFirstElement = function () {
                    // focusableElements = $menu.find(":focusable");
                    focusableElements = $menu.find('a[href], :input');
                    updateFocus(focusableElements.first());
                };

                var closeMenuAndFocusToggle = function () {
                    toggleMenu();
                    updateFocus(element);
                };

                var moveUp = function () {
                    currentIndex = focusableElements.index( element.parent().find(":focus") );
                    var isTopmostSelected = currentIndex === 0;
                    if (!isTopmostSelected) {
                        updateFocus(focusableElements.eq(currentIndex - 1));
                    } else{
                        updateFocus(focusableElements.eq(focusableElements.length-1));
                    }
                };

                var moveDown = function () {
                    currentIndex = focusableElements.index( element.parent().find(":focus") );
                    var isBottommostSelected = currentIndex === (focusableElements.length - 1);
                    if (!isBottommostSelected) {
                        updateFocus(focusableElements.eq(currentIndex + 1));
                    } else {
                        updateFocus(focusableElements.eq(0));
                    }
                };

                var makeSelection = function (menuEvent) {
                    var clickFn = focusedElement.attr('ng-click') || focusedElement.parent().attr('ql-click');

                    if (angular.isDefined(clickFn)) {
                        if( BrowserInfo.browser.isMSIE && BrowserInfo.browser.msieVersion <= 9 ) {
                            menuEvent.preventDefault();
                        }
                        focusedElement.scope().$apply(function () {
                            focusedElement.scope().$eval(clickFn);
                        });
                        updateFocus(element);
                    }
                };

                var toggleOnly = scope.$eval(attrs.ddA11yToggleOnly);

                element.keydown(function (menuLabelEvent) {
                    var downArrowKeyPressed =
                        hasPressed(menuLabelEvent, KEY_CODES.DOWN);
                    var enterOrSpaceKeyPressed =
                        hasPressed(menuLabelEvent, KEY_CODES.SPACE, KEY_CODES.ENTER);

                    if (enterOrSpaceKeyPressed) {
                        menuLabelEvent.preventDefault();
                        toggleMenu();
                    }

                    if (downArrowKeyPressed) {
                        menuLabelEvent.preventDefault();
                        if (!element.parent().hasClass("open")) {
                            toggleMenu();
                        }

                        // Realize specific 'loadingTools' from the contentViewer and programs.
                        if (angular.isDefined(scope.loadingTools) && scope.loadingTools) { // in case of lazy load tools items for Tools dropdown
                            scope.$watch('loadingTools', function (value) {
                                if (!value) {
                                    $timeout(function () {
                                        focusFirstElement();
                                    }, 0);
                                }
                            });
                        } else {
                            focusFirstElement();
                        }
                    }
                });

                $menu.find('a').attr('tabindex', -1);

                $menu.keydown(function (menuEvent) {
                    switch (menuEvent.which) {
                        case KEY_CODES.ESC:
                            menuEvent.preventDefault();
                            menuEvent.stopPropagation(); //prevents ESC from closing modal if dropdown was opened from modal
                            closeMenuAndFocusToggle();
                            break;

                        case KEY_CODES.UP:
                            if (toggleOnly) { break; }
                            menuEvent.preventDefault();
                            moveUp();
                            break;

                        case KEY_CODES.DOWN:
                            if (toggleOnly) { break; }
                            menuEvent.preventDefault();
                            moveDown();
                            break;

                        case KEY_CODES.ENTER:
                            if (toggleOnly) { break; }
                            if (angular.isDefined(focusedElement)) {
                                makeSelection(menuEvent);
                                $timeout(function () {
                                    return;
                                }, 0);
                            }

                            toggleMenu();

                            break;
                    }
                });
            }
        };
    }]);;angular.module('Realize.ui.dropdownToggle', [
    'Realize.ui.dropdownA11y',
    'ui.bootstrap.dropdown',
    'ui.bootstrap.tpls'
])
    .config(['$provide',
        function($provide) {
            $provide.decorator('dropdownToggleDirective', ['$delegate', '$document',
                function($delegate, $document) {

                    var directive = $delegate[0];
                    var openElement = null;
                    var closeMenu = angular.noop;

                    var newLink = function(scope, element, attrs) {

                        scope.$watch('$location.path', function() {
                            closeMenu();
                        });

                        element.parent().bind('click', function() {
                            closeMenu();
                        });

                        element.bind('click', function(event) {

                            var elementWasOpen = (element === openElement);

                            event.preventDefault();
                            event.stopPropagation();

                            if (!!openElement) {
                                closeMenu();
                            }

                            if (!elementWasOpen) {
                                $(".dropdown.open").removeClass("open"); //Close all other dd
                                element.parent().addClass('open');

                                element.parent().find('.dropdown-menu').attr({
                                    'aria-hidden': 'false',
                                    'aria-expanded': 'true'
                                });

                                openElement = element;
                                
                                closeMenu = function(event) {
                                    if (event) {
                                        event.preventDefault();
                                        event.stopPropagation();
                                    }

                                    $document.unbind('click', closeMenu);
                                    
                                    element.parent().removeClass('open');
                                    
                                    element.parent().find('.dropdown-menu').attr({
                                        'aria-hidden': 'true',
                                        'aria-expanded': 'false'
                                    });

                                    closeMenu = angular.noop;
                                    openElement = null;
                                };
                                
                                $document.bind('click', closeMenu);
                            }
                        });
                    };

                    directive.compile = function() {
                        return newLink;
                    };

                    return $delegate;
                }
            ]);
        }
    ]);;angular.module('Realize.ui.realizeFooter', [
    'Realize.ui.paths',
    'Realize.ui.templates',
    'Realize.core.filters.localize'
])
    .directive('realizeFooter', [
        'REALIZE_UI_ROOT_PATH',
        function(REALIZE_UI_ROOT_PATH) {
            return {
                restrict: 'EA',
                scope: {
                    BUILD_NUMBER: '@buildNumber',
                    SHOW_BUILD_NUMBER: '=showBuildNumber',
                    CREDITS: '@credits',
                    USER_AGREEMENT: '@userAgreement',
                    PRIVACY_POLICY: '@privacyPolicy'
                },
                replace: true,
                templateUrl: REALIZE_UI_ROOT_PATH + '/footer/realizeFooter.html'
            };
        }
    ]);;angular.module('Realize.ui.infoDropdown', [
    'Realize.ui.paths',
    'Realize.ui.templates'
])
    .directive('infoDropdown', [
        'REALIZE_UI_ROOT_PATH',
        function(REALIZE_UI_ROOT_PATH) {
            return {
                restrict: 'EA',
                replace: true,
                transclude: true,
                scope: {
                    infoDropdownTitleClosed: '@',
                    infoDropdownTitleOpen: '@',
                    infoDropdownHeader: '@',
                    initialState: '='
                },
                templateUrl: REALIZE_UI_ROOT_PATH + '/info-dropdown/info-dropdown.html',
                link: function(scope) {
                    /*============ MODEL ============*/
                    scope.isOpen = !!scope.initialState;

                    /*============ BEHAVIOR ============*/
                    scope.toggleOpen = function() {
                        scope.isOpen = !scope.isOpen;
                    };
                }
            };
        }
    ]);
;// display an icon for various assets based on media type
angular.module('Realize.ui.mediaIcon', [
    'Realize.ui.mediaIconFilter',
    'Realize.core.configs.MEDIA_PATH'
])
    .directive("mediaIcon", [
        '$log',
        '$filter',
        'MEDIA_PATH',
        function($log, $filter, MEDIA_PATH) {
            return {
                scope: true,
                replace: true,
                transclude: true,
                template: [
                    '<div class="mediaIcon with-tab" title="{{ content.$getTitle() }}">',
                        '<img ng-src="{{ src }}" alt="{{ content.mediaType }}" fallback-strategy="fallback" />',
                        '<span ng-transclude></span>',
                    '</div>'
                ].join(''),
                compile: function() {

                    var imagePath = MEDIA_PATH + '/skins/default/images',
                        defaultIcons = imagePath + '/default_icons';

                    return function(scope, element, attrs) {

                        scope.content = scope.$eval(attrs.mediaIcon);
                        scope.mediaType = $filter('mediaIcon')(scope.content);

                        if (!angular.isDefined(scope.mediaType)) {
                            if (scope.content.$isGooruItem && scope.content.$isGooruItem()) {
                                scope.src = defaultIcons + '/gooru_icon.png';
                            } else {
                                $log.error("Media type is undefined!", scope.content);
                            }
                            return;
                        }

                        element.addClass(scope.mediaType);

                        var iconPath = imagePath + '/mediatype/icon/',
                            custom = false,
                            customType = 'TIER',
                            large = element.hasClass('large'),
                            isTool = attrs.type === 'tool';

                        var setSource = function() {
                            var path = iconPath;
                            if (large) {
                                path += 'large/';
                            }

                            var src = path + scope.mediaType + '@2x.png',
                                size,
                                fallback;

                            if (isTool) {
                                element.removeClass('mediaIcon').removeClass('with-tab');
                                scope.fallback = [defaultIcons + '/tool@2x.png'];

                                src = scope.content.$getThumbnailUrl('TOOL', false);

                                if (!src || src === fallback) {
                                    src = scope.fallback.shift();
                                }

                                if (src.indexOf('@2x') > 0) {
                                    scope.fallback.unshift(src.replace('@2x', ''));
                                }

                                scope.src = src;
                                return;
                            }

                            if (scope.content.root) {
                                // program
                                if (attrs.type === 'dropdown') {
                                    fallback = defaultIcons + '/no_program_dropdown@2x.png';
                                    src = scope.content.$getThumbnailUrl('PROGRAM_SUBNAV');
                                } else if (attrs.type === 'course') {
                                    fallback = defaultIcons + '/no_program_thumb_course@2x.png';
                                    src = scope.content.$getThumbnailUrl('PROGRAM');
                                    element.removeClass('mediaIcon');
                                } else {
                                    size = large ? 'large' : 'small';
                                    fallback = defaultIcons + '/no_program_home' + size + '@2x.png';
                                    src = scope.content.$getThumbnailUrl('HOME', large);
                                }
                                element.removeClass('with-tab');
                            } else if (scope.mediaType === 'etext' && attrs.type === 'program') {
                                // etext program
                                fallback = defaultIcons + '/no_program_etext@2x.png';
                                src = scope.content.$getThumbnailUrl('ETEXT', false) || fallback;
                                element.removeClass('with-tab');
                            } else {
                                // all other media icons
                                if (scope.mediaType === 'interactive_media') {
                                    src = path + 'activity@2x.png';
                                } else if (scope.mediaType === 'selected_reading' || scope.mediaType === 'leveled_reader') {
                                    src = path + 'etext@2x.png';
                                } else if (scope.mediaType === 'center') {
                                    size = large ? '_grid' : '';
                                    src = path + 'center@2x.png';
                                } else if (scope.content.$isGooruItem && scope.content.$isGooruItem()) {
                                    src = defaultIcons + '/gooru_icon.png';
                                }

                                fallback = src;

                                if (scope.content.thumbnailUrls && scope.content.thumbnailUrls.length) {
                                    // TODO hard-coded(customType=Tier), $getThumbnailUrl needs to be improved
                                    // assume custom thumbnail is displayed small unless "large" attribute is true
                                    var customSrc = scope.content.$getThumbnailUrl(customType, attrs.large ? scope.$eval(attrs.large) : false);
                                    if (customSrc) {
                                        src = customSrc;

                                        element.removeClass('with-tab').removeClass('mediaIcon').addClass('customImage');
                                        custom = true;
                                    } else {
                                        // case: Either "List" or "Thumbnail" view having custom thumbnail
                                        // Then "customImage" class gets applied which is not getting removed if switch to another view
                                        // so again checking if no customSrc but class "customImage"
                                        if (element.hasClass('customImage')) {
                                            element.removeClass('customImage').addClass('mediaIcon').addClass('with-tab');
                                        }
                                    }
                                }
                            }

                            scope.fallback = [fallback];
                            scope.$on("imageFallback", function(event, fallbackEle) {
                                if (event.targetScope.content && !event.targetScope.content.$isGooruItem() && fallbackEle.parent().hasClass('customImage')) {
                                    fallbackEle.parent().addClass('mediaIcon with-tab fallback-applied');
                                }
                            });

                            if (!src || src === fallback) {
                                src = scope.fallback.shift();
                            }

                            if (src.indexOf('@2x') > 0) {
                                scope.fallback.unshift(src.replace('@2x', ''));
                            }

                            scope.src = src;
                        };

                        setSource();

                        attrs.$observe('large', function(val) {
                            // TODO hoping there's a better way to do this
                            // watching the large attribute for switching between small and
                            // large icon if view changes (e.g. via toggle)
                            large = scope.$eval(val);
                            if (large) {
                                element.addClass('large');
                            } else {
                                element.removeClass('large');
                            }
                            setSource();
                        });
                    };
                }
            };
        }
    ]);;angular.module('Realize.ui.mediaIconFilter', [
    'Realize.core.filters.underscores'
])
    .filter("mediaIcon", [
        '$filter',
        function($filter) {
            return function(input) {
                if (!angular.isDefined(input) || input === null ||
                    !angular.isDefined(input.mediaType) ||
                    !angular.isDefined(input.fileType)) {
                    return;
                }

                var mediaType = angular.lowercase(input.mediaType),
                    fileType = angular.lowercase(input.fileType);


                // is it a document?
                if (mediaType === 'document') {
                    if (fileType.indexOf("doc") !== -1) {
                        return "document";
                    }
                    if (fileType.indexOf("txt") !== -1) {
                        return "document";
                    }
                    if (fileType.indexOf("rtf") !== -1) {
                        return "document";
                    }
                    if (fileType.indexOf("ppt") !== -1) {
                        return "slideshow";
                    }
                    if (fileType.indexOf("pdf") !== -1) {
                        return "pdf";
                    }
                }

                // is it visual learning?
                if (input.contentType === "Visual Learning") {
                    return "visual_learning";
                }

                // is it remediation?
                if (mediaType.indexOf("remediation") !== -1) {
                    return "lesson";
                }

                // default to using the mediaType
                return $filter('underscores')(mediaType);
            };
        }
    ]);;/* Modal Dialog Service - handles the creation and destruction of modal dialogs */
angular.module('Realize.ui.modal', [
    'Realize.ui.templates',
    'Realize.ui.keyCodes',
    'Realize.core.services.messages',
    'Realize.core.configs.LOGOUT_URL',
    'Realize.core.filters.localize'
])
    .factory('ModalGet', ['$http', '$templateCache', '$q', '$log',
        function($http, $templateCache, $q, $log) {
            return function(dialogUrl) {
                var promise = $http.get(dialogUrl, {
                    cache: $templateCache
                }).then(function(response) {
                    $log.log('modal http', dialogUrl);
                    return response.data;
                }, function(err) {
                    $log.warn('[Modal] getModalHtml ERROR: ', err);
                    return $q.reject(err);
                });

                return promise;
            };
        }
    ])
    .factory('Modal', ['ModalGet', '$compile', '$log', '$timeout', 'Messages', 'REALIZE_UI_ROOT_PATH', '$q', '$rootScope', '$window', 'KEY_CODES', // TODO: explain KEY_CODES somewhere
        function(getModalHtml, $compile, $log, $timeout, Messages, templatePath, $q, $rootScope, $window, KEY_CODES) {

            // these make it a singleton
            var dialog = null,
                target = $('.modalRegion');

            // preload the progress dialog...
            getModalHtml(templatePath + "/modal/modal_progress.html");

            var destroyDialog = function() {
                // $log.log("destroyDialog: ", dialog);
                var deferred = $q.defer();

                if (angular.isElement(dialog)) {

                    // Hide and remove from DOM
                    dialog.addClass('hide');

                    $timeout(
                        function() {
                            dialog.modal('hide');
                            target.empty();
                            deferred.resolve();
                            $('.modal-backdrop').remove();
                        },
                        400
                    );

                    // TODO: this probably needs to be strengthened and moved to a manageModality function
                    // Restore keyboard access to links on the page

                    // restore global background items

                    $('#skipNav a').attr('tabindex', 1);
                    $('#globalNav .section a').attr('tabindex', 2);
                    $('#usernameDropdown').attr('tabindex', 5);
                    $('#globalSearch #SearchTextInput, #globalSearch button').attr('tabindex', 3);
                    $('#sectionNav a').removeAttr('tabindex', -1);
                    $('#footer a').removeAttr('tabindex', -1);
                    // restore dynamic background items
                    $('#sectionBody a, #sectionBody area, #sectionBody button, #sectionBody input, #sectionBody object, #sectionBody select, #sectionBody textarea').removeAttr('tabindex', -1);
                    $('#skipTarget, div.customCheckbox input[type="checkbox"]').attr('tabindex', -1);
                    $('body').children().removeAttr('aria-hidden', 'true');
                    $('.modalRegion').removeAttr('aria-hidden', 'false');
                    //$('.modal-backdrop').removeAttr('tabindex', -1);
                    $('.modal').off('hide');

                } else {
                    deferred.resolve();
                }

                return deferred.promise;
            };

            var showDialog = function(dialogUrl, scope) {
                return getModalHtml(dialogUrl).then(function(html) {

                    return destroyDialog().then(function() {
                        // Attach loaded template to the DOM
                        dialog = $(html);
                        target.hide().append(dialog);

                        // here we add Messages service to every scope
                        scope.getMessage = Messages.getMessage;

                        // register event before dialog call, as it will be fired during dialog call
                        dialog.on('shown', function() {
                            // compile the template in the provided scope
                            $compile(dialog)(scope);

                            $timeout(function() {
                                //TEMP HACK for 2.1 assignment modal issue
                                if (dialog.attr("id") === "assignmentModal" && dialog.find(".modal-header h1").length === 0) {
                                    $log.warn("AssignmentModal's scope is destoryed, not displaying modal");
                                    destroyDialog();
                                } else {
                                    //dialog.removeClass('hide');

                                    // add to our holder
                                    target.show();
                                }

                                $(dialog).find('[auto-focus=""]:visible').focus();

                            }, 10);

                            //custom ESC handler for closing modal
                            $(dialog).keydown(function(event) {
                                if (event.which === KEY_CODES.ESC) {
                                    destroyDialog();
                                }
                            });
                        });

                        // initialize the modal before passing it to angularjs so that the scope variables
                        // in the template get resolved
                        // e.g template is simple_dialog.jsp
                        // see more details in this task -
                        // https://rally1.rallydev.com/#/7278330890d/detail/task/10365036502
                        dialog.modal({
                            backdrop: 'static',
                            keyboard: false //disable default ESC handler
                        });

                        // TODO: this probably needs to be strengthened and moved to a manageModality
                        // function
                        // Prevent keyboard access to links in background by removing them from the tabindex
                        // array

                        // remove global background items
                        $('#skipNav a').attr('tabindex', -1);
                        $('#globalNav .section a').attr('tabindex', -1);
                        $('#usernameDropdown').attr('tabindex', -1);
                        $('#globalSearch #SearchTextInput, #globalSearch button').attr('tabindex', -1);
                        $('#sectionNav a').attr('tabindex', -1);
                        $('#footer a').attr('tabindex', -1);
                        // remove dynamic background items
                        $('#sectionBody a, #sectionBody area, #sectionBody button, #sectionBody input, #sectionBody object, #sectionBody select, #sectionBody textarea, #sectionBody a').attr('tabindex', -1);
                        $('body').children().attr('aria-hidden', 'true');
                        $('.modalRegion').attr('aria-hidden', 'false');
                        $('.modal-backdrop').attr('tabindex', -1);
                        // close options dropdown in tier thumbnail view
                        $('.quick-list-dropdown .open').removeClass('open');
                        $(dialog).on('hidden', function() {
                            scope.$broadcast('modal.hidden');
                        });

                        // the autoFocus directive did not have the desired effect. So, doing this hack.

                    }, function(err) {
                        $log.error('error destroying dialog', err);
                        return $q.reject(err);
                    });
                }, function(err) {
                    $log.error('error building dialog', err);
                    return $q.reject(err);
                });
            };

            /**
             * Removes modal dialog from DOM and destroys it
             */
            var hideDialog = function() {
                return destroyDialog();
            };

            /**
             * Creates a progress modal and returns the scope of the modal
             *
             * @param scope the scope to attach the progress properties to
             * @param progressObject map of progress properties, see partials/modal_progress
             */
            var progressDialog = function(scope, progressObject) {
                angular.forEach(progressObject, function(value, property) {
                    scope[property] = value;
                });

                // default: start at 0 an increment by 10% every 100 ms
                if (angular.isUndefined(scope.setProgress)) {
                    $log.log('[[ WARNING ]] progress-modal expecting a setProgress method, none found');
                    scope.setProgress = function(percent) {
                        scope.progressPercent = percent;
                    };
                }

                if (angular.isUndefined(scope.progressPercent)) {
                    scope.progressPercent = 0;
                }

                if (angular.isUndefined(scope.progressIncrement)) {
                    scope.progressIncrement = 10;
                }

                var timeout, fakeProgressPromise;
                scope.fakeProgress = function(desiredTimeout) {
                    timeout = desiredTimeout || 100;
                    $timeout(function fakeProgress() {
                        if (100 - (scope.progressPercent + scope.progressIncrement) > 0) {
                            scope.setProgress(scope.progressPercent + scope.progressIncrement);
                            fakeProgressPromise = $timeout(fakeProgress, timeout);
                        }
                    }, timeout);
                };

                scope.progressComplete = function(timeout) {
                    if (fakeProgressPromise) {
                        $timeout.cancel(fakeProgressPromise);
                    }
                    timeout = timeout || 1000;
                    scope.setProgress(100);
                    return {
                        then: function(callback) {
                            $timeout(callback, timeout);
                        }
                    };
                };

                var promise = showDialog(templatePath + '/modal/modal_progress.html', scope);
                promise.then(function() {
                    // successfully launched modal
                    return scope;
                }, function(err) {
                    $log.error('error building progress dialog', err);
                    return $q.reject(err);
                });

                // create pseudo promise for scoped actions after promise is fulfilled
                scope.then = function(fn) {
                    promise.then(fn);
                    return scope;
                };

                scope.close = function() {
                    hideDialog();
                };

                return scope;
            };

            var toolDialog = function(scope, selectedTool, titleFromMessageCode) {
                // avoid changes to the original item
                selectedTool = angular.copy(selectedTool);
                selectedTool.pages = selectedTool.previews || [];

                if (titleFromMessageCode) {
                    selectedTool.title = Messages.getCode(titleFromMessageCode);
                }

                var modalScope = scope.$new(true);
                modalScope.selectedTool = selectedTool;
                modalScope.currentPage = 1;
                modalScope.close = function() {
                    hideDialog().then(function() {
                        modalScope.$destroy();
                    });
                };
                modalScope.download = function(e, item) {
                    e.stopPropagation();
                    e.preventDefault();

                    if (item.restrictedDownloadContent.search(/download/gi) >= 0) {
                        $window.open(item.attachments[0].downloadURL, "_blank");
                    }
                };

                return showDialog(templatePath + '/modal/tool_popup_modal.html', modalScope);
            };

            // valid button type enum
            var BUTTONS = {
                OK: 'OK',
                CANCEL: 'CANCEL'
            };

            var showSimpleDialog = function(title, body, buttons, options) {
                // todo: merge in options? right now just id is used...
                options = options || {};

                var modalScope = $rootScope.$new(true),
                    suicide = function() {
                        hideDialog().then(function() {
                            modalScope.$destroy();
                        });
                    },
                    modalResult = $q.defer(),
                    promise = modalResult.promise,
                    modalButtons = [],
                    closeOK = false;

                // simple dialogs can only have 2 types of buttons, OK and/or Cancel
                // {title: ..., type: Modal.BUTTONS.OK, handler: fn}
                if (angular.isDefined(buttons) && angular.isObject(buttons)) {
                    var ok = buttons[BUTTONS.OK],
                        cancel = buttons[BUTTONS.CANCEL];

                    if (cancel && ok) {
                        promise = promise.then(ok.handler, cancel.handler);
                    } else if (cancel) {
                        promise = promise.then(null, cancel.handler);
                    } else if (ok) {
                        closeOK = true;
                        promise = promise.then(ok.handler, null);
                    }

                    if (cancel) {
                        modalButtons.push({
                            title: cancel.title ? Messages.getMessageOrDefault(cancel.title, cancel.title) : Messages.getMessageOrDefault('Cancel', 'Cancel'),
                            isDefault: !!cancel.isDefault,
                            clickHandler: function() {
                                modalResult.reject();
                            }
                        });
                    }

                    if (ok) {
                        modalButtons.push({
                            title: ok.title ? Messages.getMessageOrDefault(ok.title, ok.title) : Messages.getMessageOrDefault('Ok', 'Ok'),
                            isDefault: !!ok.isDefault,
                            clickHandler: function() {
                                modalResult.resolve();
                            }
                        });
                    }
                } else {
                    // default to having OK
                    closeOK = true;
                    modalButtons.push({
                        title: Messages.getMessageOrDefault('OK', 'OK'),
                        isDefault: true,
                        clickHandler: function() {
                            modalResult.resolve();
                        }
                    });
                }

                // always kill the modal in the end
                promise.then(suicide, suicide);

                if( angular.isDefined(options.id) ) {
                    modalScope.dialogId = options.id;
                }
                modalScope.title = Messages.getMessageOrDefault(title, title);
                modalScope.body = Messages.getMessageOrDefault(body, body);
                modalScope.closeBtnClickHandler = closeOK ? modalResult.resolve : modalResult.reject;
                modalScope.buttons = modalButtons;
                modalScope.isClosable = angular.isDefined(options.isClosable) ? options.isClosable : true;

                return showDialog(templatePath + "/modal/simple_dialog.html", modalScope);
            };

            // final factory object
            return {
                showDialog: showDialog,
                hideDialog: hideDialog,
                progressDialog: progressDialog,
                toolDialog: toolDialog,
                simpleDialog: showSimpleDialog,
                BUTTONS: BUTTONS
            };
        }
    ])
    .factory("SessionTimeoutModal", ['$rootScope', 'Modal', '$window', 'LOGOUT_URL', 'REALIZE_UI_ROOT_PATH',
        function($rootScope, Modal, $window, LOGOUT_URL, templatePath) {
            var template = templatePath + '/modal/session_timeout_dialog.html';

            var setTemplate = function(newTemplate) {
                template = newTemplate;
            };

            var onHidden = function() {
                $window.location.href = LOGOUT_URL;
            };

            var setOnHidden = function(newOnHiddenFn) {
                onHidden = newOnHiddenFn;
            };

            var showSessionTimeoutModal = function() {
                var scope = $rootScope.$new();

                scope.close = function($event) {
                    $event.stopPropagation();
                    $event.preventDefault();

                    Modal.hideDialog();
                };

                scope.$on('modal.hidden', onHidden);

                return Modal.showDialog(template, scope);
            };

            return {
                showDialog: showSessionTimeoutModal,
                setTemplate: setTemplate,
                setOnHidden: setOnHidden
            };
        }
    ]);
;/**
 * number-icon.dir.js - displays a number icon with other markup
 */

angular.module('Realize.ui.numberIcon', [])
    .directive('numberIcon', [function() {
            return {
                restrict: 'EA',
                transclude: true,
                replace: true,
                template: '<span class="number-icon"><span class="number-icon-number" ng-transclude></span></span>'
            };
        }
    ]);;angular.module('Realize.ui.paginatorStats', [
    'Realize.ui.paths',
    'Realize.ui.templates',
    'Realize.core.filters.localize'
])
    .directive('paginatorStats', [
        'REALIZE_UI_ROOT_PATH',
        function(REALIZE_UI_ROOT_PATH) {
            return {
                restrict: 'EA',
                templateUrl: REALIZE_UI_ROOT_PATH + '/paginator/paginator-stats.dir.html',
                replace: false,
                scope: {
                    total: "=",
                    page: "=",
                    limit: "="
                },
                link: function(scope) {
                    scope.$watch('total + page + limit', function() {
                        var total = parseInt(scope.total, 10),
                            page = parseInt(scope.page, 10),
                            limit = parseInt(scope.limit, 10);
                        scope.viewStartAt = (page - 1) * limit + 1;
                        scope.viewEndAt = Math.min(page * limit, total);
                        scope.viewTotal = total;
                    });
                }
            };
        }
    ]);;angular.module('Realize.ui.paginator', [
    'Realize.ui.paths',
    'Realize.ui.templates'
])
    .directive('paginator', [
        'REALIZE_UI_ROOT_PATH',
        function(REALIZE_UI_ROOT_PATH) {
            return {
                scope: {
                    page: '=',
                    total: '@',
                    limit: '@',
                    range: '@',
                    isToScrollUp: '@',
                    scrollTarget: '='
                },
                replace: false,
                templateUrl: REALIZE_UI_ROOT_PATH + '/paginator/paginator.dir.html',
                controller: [
                    '$scope',
                    '$element',
                    '$attrs',
                    '$timeout',
                    function($scope, $element, $attrs, $timeout) {

                        /**
                         * @method setPage
                         * @param pg {Integer}
                         */
                        $scope.setPage = function(pg) {
                            // Note: updateParentScopeValue is if page index isn't bound. Why would you do that?
                            // updateParentScopeValue($scope, $attrs.page, pg);

                            if ($element.attr('disabled')) {
                                return;
                            }

                            if ($scope.$emit('paginator.onBeforePageChange', pg, $scope.page).defaultPrevented) {
                                $scope.$emit('paginator.pageChangePrevented', pg, $scope.page);
                            } else {
                                $scope.page = pg;
                                if ($scope.isToScrollUp) {
                                    $('html, body').animate({
                                        scrollTop: $scope.scrollTarget && $scope.scrollTarget.offset() ? $scope.scrollTarget.offset().top : 0
                                    });
                                }
                                $scope.$emit('paginator.pageChangeSuccess', pg);
                            }
                        };

                        /**
                         * @method goFirst
                         * Goes to the first page.
                         */
                        $scope.goFirst = function() {
                            $scope.setPage(1);
                        };

                        /**
                         * @method goLast
                         * Go to the last page
                         */
                        $scope.goLast = function() {
                            $scope.setPage($scope.totalPages);
                        };

                        /**
                         * @method goNext
                         * Advance to the next page
                         * TODO: Check totalPages as max?
                         */
                        $scope.goNext = function() {
                            $scope.setPage($scope.page + 1);
                        };

                        /**
                         * @method goPrevious
                         * Go to previous page
                         * TODO: Check for non-negative integer
                         */
                        $scope.goPrevious = function() {
                            $scope.setPage($scope.page - 1);
                        };

                        /**
                         * @listener paginator.page.changed
                         * @param ev {Object} - event
                         * @param page {Integer} - page number
                         */
                        $scope.$on('paginator.page.changed', function(ev, page) {
                            $scope.setPage(page);
                        });

                        /**
                         * @method calcVisibleRange
                         * @private
                         * @param page {Integer}
                         * @param totalPages {Integer}
                         * @param count {Integer}
                         * @returns {Array}
                         */
                        function calcVisibleRange(page, totalPages, count) {
                            var start = 1;

                            if (totalPages > count) {
                                start = page - Math.floor(count / 2);

                                // note: can be two ternaries, but left expanded for clarity
                                if (page < count || page > totalPages - count) {
                                    if ((page > totalPages - Math.ceil(count / 2))) {
                                        start = totalPages - count;
                                    } else if (page < Math.ceil(count / 2)) {
                                        start = 1;
                                    }
                                }
                            }

                            return _.range(start || 1, Math.min(start + count, totalPages) + 1);
                        }

                        /**
                         * @listener 'total + page'
                         * When the total or page number change, update totalPages and visibleRange.
                         */
                        $scope.$watch('total + page', function() {
                            if (!isNaN($scope.total) && !isNaN($scope.limit) && !isNaN($scope.page)) {
                                $scope.totalPages = parseInt(Math.ceil($scope.total / $scope.limit), 10);
                                $scope.visibleRange = calcVisibleRange($scope.page, $scope.totalPages, 10);
                            }
                        });

                    }
                ]
            };
        }
    ]);;angular.module('Realize.ui.qlClick', [])
// since quicklinks must exist inside a quick-list, clicks should happen in parent scope
.directive("qlClick", ['$parse',
    function($parse) {
        return {
            link: function(scope, el, attrs) {
                var fn = $parse(attrs.qlClick);

                el.on('click', function(e) {
                    fn(scope.$parent, {
                        $event: e
                    });
                    if (!scope.$$phase && !scope.$root.$$phase) {
                        scope.$apply();
                    }
                });

                // TODO: need destroy handler?
            }
        };
    }
]);
;angular.module('Realize.ui.quickLink', [])
    .directive("quickLink", ['$log',
        function($log) {
            return {
                template: '<li class="quick-link"><a href="javascript://"><i class="icon-{{ icon }}"></i>{{ text }}</a></li>',
                replace: true,
                scope: true,
                link: function(scope, el, attrs) {

                    if (el.parent().attr('role') === "menu") {
                        el.find('a').attr('role', 'menuitem');
                    }

                    // carry along href to link if provided
                    attrs.$observe('href', function() {
                        if (attrs.href !== '') {
                            el.find('a').attr('href', attrs.href);
                            if (attrs.target) {
                                el.find('a').attr('target', attrs.target);
                            }
                        }
                    });

                    //default to false if ng-hide or ng-show are undefined
                    scope.hidden = scope.$eval(attrs.ngHide) || angular.isDefined(attrs.ngShow) ? !scope.$eval(attrs.ngShow) : false;
                    scope.icon = attrs.icon;
                    scope.$watch(attrs.text, function(text) {
                        scope.text = text;
                    });

                    scope.$watch(attrs.ngHide, function(val, old) {
                        if (angular.isDefined(val) && val !== old) {
                            scope.hidden = !!val;
                            el.parent().trigger('quicklinkDisplayChange');
                        }
                    });

                    scope.$watch(attrs.ngShow, function(val, old) {
                        if (angular.isDefined(val) && val !== old) {
                            scope.hidden = !!!val;
                            el.parent().trigger('quicklinkDisplayChange');
                        }
                    });
                }
            };
        }
    ]);;angular.module('Realize.ui.quickLinkMenu', [])
    .directive('quickLinkMenu', ['$log',
        function($log) {
            var tmpl = [
                '<li>',
                    '<a ng-click="toggleClick($event);" class="dropdown-toggle" role="button" dropdown-a11y href="javascript://">',
                        '<i class="icon-{{ toggleIcon }}"></i>{{ toggleText }}<i class="icon-caret-{{ toggleDirection }}"></i>',
                    '</a>',
                    '<ul class="dropdown-menu pull-right quick-link-menu-items" role="menu" ng-transclude></ul>',
                '</li>'
            ].join('');

            return {
                template: tmpl,
                replace: true,
                scope: true,
                transclude: true,
                link: function(scope, el, attrs) {
                    var options = scope.$eval(attrs.quickLinkMenu);
                    //$log.log('QLM Options', options);

                    scope.toggleIcon = options.icon;
                    scope.toggleText = options.text;
                    scope.toggleDirection = options.direction;

                    scope.toggleClick = function(e) {
                        if (options.toggleClick && angular.isFunction(options.toggleClick)) {
                            options.toggleClick.call(null, e);
                        }
                    };

                    // template modifications based on passed params
                    if (!scope.toggleIcon) {
                        el.find('> a i:first').remove();
                    }

                    // cache the contents of the menu
                    var items = el.find('.quick-link-menu-items').children();

                    // when a parent list converts, need to convert to just items
                    scope.$on('collapse', function() {
                        //$log.log('collapse event!', items);
                        el.after(items);
                        el.hide();
                    });

                    scope.$on('expand', function() {
                        //$log.log('expand event');
                        el.find('.quick-link-menu-items').append(items);
                        el.css('display', 'inline-block');
                    });
                }
            };
        }
    ]);
;angular.module('Realize.ui.quickList', [])
    .directive('quickList', ['$log', '$parse', '$compile',
        function($log, $parse, $compile) {
            return {
                restrict: 'AE',
                template: '<ul class="quicklinks" ng-transclude></ul>',
                replace: true,
                transclude: true,
                controller: ['$scope', '$element',
                    function($scope, $element) {
                        var ctrl = this;

                        ctrl.$visibleChildCount = 0;

                        ctrl.$calcVisibleChildren = function() {
                            ctrl.$visibleChildCount = 0;
                            angular.forEach($element.children('.quick-link'), function(li) {
                                var link = angular.element(li),
                                    childScope = link.scope();

                                if (childScope.hidden === false) {
                                    ctrl.$visibleChildCount++;
                                }
                            });

                            //$log.log('calc', visibleChildCount, el);
                        };
                    }
                ],
                link: function(scope, el, attrs, ctrl) {
                    scope.menuDirection = scope.$eval(attrs.isdropup) ? "dropup" : "dropdown";
                    scope.caretDirection = scope.$eval(attrs.isdropup) ? "icon-caret-up" : "icon-caret-down";
                    // This feels dirty.  Hate it. But, for collapsed mode, the only visible markup is generated so there is
                    // no easy way to mark the li you need to click on to display the dropdown.  Not a huge
                    // problem if you only have 1 quick-list in a row, but if you have multiple, the only other
                    // option is to use :eq() style selectors in your tests.  So, provide a way to add an e2e selector
                    var e2eId = angular.isDefined(attrs.e2eId) ? ' data-e2e-id="' + attrs.e2eId + '"' : '',
                        // support ng-show, ng-hide on the quick-list.  If we ever make this directive create it's own
                        // isolate scope, this will most likely need to be changed, but for now, works ok.
                        ngShow = angular.isDefined(attrs.ngShow) ? ' ng-show="' + attrs.ngShow + '"' : '',
                        ngHide = angular.isDefined(attrs.ngHide) ? ' ng-hide="' + attrs.ngHide + '"' : '',
                        tmpl = [
                            '<ul class="quick-list-dropdown quicklinks"' + ngShow + ngHide + '>',
                                '<li class="quick-list-dropdown-trigger {{ menuDirection }}"' + e2eId + '>',
                                    '<a href="javascript://" class="dropdown-toggle" data-toggle="dropdown" role="button">',
                                        '<i class="icon-', attrs.collapsedIcon, '"></i>', attrs.collapsedLabel, '<i class="{{ caretDirection }}"></i>',
                                    '</a>',
                                    // quicklinks get injected here...
                                '</li>',
                            '</ul>'
                        ].join(''),
                        collapsed = false;

                    scope.$watch(attrs.isdropup, function(attrDropUp, old) {
                        if (angular.isDefined(attrDropUp) && attrDropUp === old) {
                            return;
                        }
                        scope.menuDirection = attrDropUp ? "dropup" : "dropdown";
                        scope.caretDirection = attrDropUp ? "icon-caret-up" : "icon-caret-down";
                    });

                    function doCollapse() {
                        var $wrapper = $(tmpl);
                        $compile($wrapper)(scope);
                        //$log.log('$wrapper', $wrapper);
                        el.after($wrapper).removeClass('quicklinks').addClass('dropdown-menu').appendTo($wrapper.find('li'));
                        //$wrapper.find('.dropdown-toggle').dropdown();

                        //$log.log('quickList collapse', el);
                        collapsed = true;
                        scope.$broadcast('collapse');
                        //$log.log('doCollapse', visibleChildCount);
                    }

                    function doExpand() {
                        // unwrap it
                        var wrapper = el.parents('ul.quick-list-dropdown');
                        if (wrapper.length > 0) {
                            wrapper.after(el);
                            wrapper.remove();
                            el.removeClass('dropdown-menu').addClass('quicklinks');
                        }

                        //$log.log('quickList expand', el);
                        collapsed = false;
                        scope.$broadcast('expand');
                    }

                    ctrl.$calcVisibleChildren();

                    el.on('quicklinkDisplayChange', function() {
                        var collapsedFn = $parse(attrs.collapsed);
                        ctrl.$calcVisibleChildren();

                        if (ctrl.$visibleChildCount <= 1) {
                            //$log.log('I should expand!', collapsed, ctrl, el[0]);
                            doExpand();

                        } else if (collapsedFn()) {
                            // if enough items become visible and if attrs.collapsed is truthy,
                            // revert to displaying the collapsed form.
                            doCollapse();
                        }
                    });

                    scope.$watch(attrs.collapsed, function(attrCollapsed, old) {
                        if (angular.isUndefined(attrCollapsed) || angular.isUndefined(old)) {
                            return;
                        }

                        ctrl.$calcVisibleChildren();
                        if (!collapsed && attrCollapsed && ctrl.$visibleChildCount > 1) {
                            doCollapse();
                        } else if (collapsed) {
                            doExpand();
                        }
                    });
                }
            };
        }
    ]);;angular.module('Realize.ui')
    .run(['$templateCache', 'REALIZE_UI_ROOT_PATH', function(templateCache, templateRoot) {
            templateCache.put(templateRoot + "/modal/tool_popup_modal.html", "<div id=\"toolPopupModal\" class=\"modal\" role=\"dialog\" tabindex=\"0\" aria-describedby=\"toolPopupModalContent\" aria-labelledby=\"toolPopupModalTitle\"><div class=\"modal-header\"><div class=\"header clearfix\"><h1 id=\"toolPopupModalTitle\" class=\"pull-left\" role=\"heading\">{{selectedTool.$getTitle();}}</h1><a href=\"javascript://\" class=\"close pull-right\" ng-click=\"close()\"><i class=\"icon-remove\"></i><span class=\"a11yOffScreen\">{{getMessage(\"global.modal.close.a11y\")}}</span></a></div><div id=\"toolPopupModalContent\" class=\"content-navbar\"><div class=\"content-navbar-inner clearfix\"><div quick-list class=\"cv\"><br quick-link ql-click=\"download($event, selectedTool)\" ng-show=\"(selectedTool.restrictedDownloadContent | contains:'download') && !isIDevice\" class=\"pull-right no-margin download-link\" icon=\"download-alt\" text=\"getMessage('program.tools.action.download')\"></div></div></div></div><div class=\"modal-body noPadding\"><div doc-player=\"selectedTool.pages\" doc-type=\"selectedTool.fileType\" page=\"currentPage\" offset-y=\"-50\" scroll-speed=\"1\"></div></div></div>");
            templateCache.put(templateRoot + "/modal/session_timeout_dialog.html", "<div id=\"sessionTimeoutDialog\" class=\"modal\" role=\"dialog\" tabindex=\"0\" aria-labelledby=\"sessionTimeoutDialogTitle\"><div class=\"modal-header clearfix\"><h1 class=\"pull-left\" id=\"sessionTimeoutTitle\" role=\"heading\"> {{\"global.sessionTimeout.title\" | localize}} </h1><a href=\"javascript://\" class=\"close pull-right\" ng-click=\"close($event)\" auto-focus><i class=\"icon-remove\"></i><span class=\"a11yOffScreen\">{{\"global.modal.close.a11y\" | localize}}</span></a></div><div id=\"sessionTimeoutDialogContent\" class=\"modal-body\"><p> {{\"global.sessionTimeout.message\" | localize}} </p></div><div class=\"modal-footer\"><div class=\"pull-right\"><button class=\"margin-left pull-left\" ng-click=\"close($event)\"> {{\"global.sessionTimeout.action.continue\" | localize}} </button></div></div></div>");
            templateCache.put(templateRoot + "/modal/simple_dialog.html", "<div id=\"{{dialogId || 'simpleDialog'}}\" class=\"modal\" role=\"dialog\" tabindex=\"0\" aria-describedby=\"dialogContent\" aria-labelledby=\"dialogTitle\"><div class=\"modal-header\"><h1 id=\"dialogTitle\" class=\"pull-left\" role=\"heading\">{{title}}</h1><a ng-if=\"isClosable\" href=\"javascript://\" class=\"close pull-right\" ng-click=\"closeBtnClickHandler()\" auto-focus><i class=\"icon-remove\"></i><span class=\"a11yOffScreen\">{{getMessage(\"global.modal.close.a11y\")}}</span></a></div><div id=\"dialogContent\" class=\"modal-body\" ng-bind-html-unsafe=\"body\"></div><div class=\"modal-footer\"><div ng-show='isDismissible' class=\"pull-left\"><input type=\"checkbox\" checkbox-custom name=\"isDismissed\" id=\"isDismissed\" ng-model=\"dismissed\"/><label for=\"isDismissed\">{{getMessage(\"global.modal.dismissable.message\")}}</label></div><div class=\"pull-right\"><button ng-repeat=\"button in buttons\" class=\"margin-left pull-left\" ng-class=\"{'secondary': !button.isDefault}\" ng-click=\"button.clickHandler($event)\">{{button.title}}</button></div></div></div>");
            templateCache.put(templateRoot + "/modal/modal_progress.html", "<div id=\"{{dialogId || 'progressDialog'}}\" class=\"modal\" role=\"dialog\" tabindex=\"0\" aria-describedby=\"dialogContent\" aria-labelledby=\"dialogTitle\"><div class=\"modal-header\"><h1 id=\"dialogTitle\" role=\"heading\"><span>{{progressHeader}}</span><a ng-show=\"progressClosable\" class=\"close pull-right\" ng-click=\"closeProgress()\" auto-focus><i class=\"icon-remove\"></i><span class=\"a11yOffScreen\">{{getMessage(\"global.modal.close.a11y\")}}</span></a></h1></div><div id=\"dialogContent\" class=\"modal-body\"><h2 class=\"info\"><p>{{progressMessage}}</p></h2><div class=\"progress\"><div class=\"bar\" ng-style=\"{width: progressPercent + '%'}\">{{progressPercent}}%</div></div></div></div>");
            templateCache.put(templateRoot + "/footer/realizeFooter.html", "<div id=\"footer\" role=\"contentinfo\"><div id=\"footer-inner\" class=\"clearfix\"><span id=\"footer-text\" class=\"pull-left\"> {{\"footer.copyright.copyright\" | localize}} &copy; Pearson Education, Inc. {{\"footer.copyright.affiliates\" | localize}}. {{\"footer.copyright.allRightsReserved\" | localize}}. <a href=\"{{USER_AGREEMENT}}\" target=\"_blank\">{{\"footer.userAgreement\" | localize}}</a> &nbsp;|&nbsp;<a href=\"{{PRIVACY_POLICY}}\" target=\"_blank\">{{\"footer.privacyPolicy\" | localize}}</a><span ng-if=\"CREDITS\">&nbsp;|&nbsp;<a href=\"{{CREDITS}}\" target=\"_blank\">{{\"footer.credits\" | localize}}</a></span><span ng-if=\"SHOW_BUILD_NUMBER\">&nbsp;|&nbsp;rev. {{BUILD_NUMBER}}</span></span><div class=\"pearson-logo pull-right\"></div></div></div>");
            templateCache.put(templateRoot + "/typeahead/typeahead-popup.html", "<div class=\"dropdown clearfix\" ng-class=\"{open: isOpen()}\"><ul class=\"typeahead dropdown-menu\"><li ng-repeat=\"match in matches\" ng-class=\"{active: isActive($index) }\" ng-mouseenter=\"selectActive($index)\" ng-click=\"selectMatch($index)\"><a tabindex=\"-1\" typeahead-match index=\"$index\" match=\"match\" query=\"query\" template-url=\"templateUrl\"></a></li></ul></div>");
            templateCache.put(templateRoot + "/alerts/messageBasedAlert.html", "<div><div class=\"alert alert-{{alertMessageDetails.type}} fade in\" ng-show=\"alertOn\"><div class=\"icon-container\"><i class=\"icon-{{alertMessageDetails.icon}}\"></i></div><div class=\"message-container\"><span ng-bind-html=\"alertMessageDetails.msg\"></span></div></div></div>");
            templateCache.put(templateRoot + "/alerts/firstVisitAlert.html", "<div class=\"firstVisitInfo clearfix\"><div class=\"icon\" title=\"{{title}}\"></div><a href=\"javascript://\" class=\"close pull-right\" ng-click=\"closeFn($event)\"><i class=\"icon-remove\"></i><span class=\"a11yOffScreen\">{{\"global.modal.close.a11y\" | localize}}</span></a><div class=\"info\" title=\"{{title}}\"><h1>{{title}}</h1><p ng-bind-html=\"description\"></p></div></div>");
            templateCache.put(templateRoot + "/info-dropdown/info-dropdown.html", "<div class=\"info-dropdown\" ng-class=\"{'dropdown-open': isOpen}\"><div class=\"info-dropdown-toolbar clearfix\"><div class=\"info-dropdown-header\" ng-show=\"isOpen\"><h2>{{infoDropdownHeader}}</h2></div><div class=\"info-dropdown-button\" ng-click=\"toggleOpen()\"><a href=\"javascript://\"><i class=\"icon icon-info-sign\"></i><span class=\"info-dropdown-text\" ng-if=\"isOpen\">{{infoDropdownTitleOpen}}</span><span class=\"info-dropdown-text\" ng-if=\"!isOpen\">{{infoDropdownTitleClosed}}</span></a></div></div><div class=\"info-dropdown-content animate-show-fade\" ng-transclude ng-show=\"isOpen\"></div></div>");
            templateCache.put(templateRoot + "/paginator/paginator.dir.html", "<div ng-hide=\"totalPages <= 1\" class=\"pagination\"><ul><li data-e2e-id=\"firstPage\" ng-click=\"goFirst()\" ng-if=\"page> 1\"><a href=\"javascript://\">«</a></li><li data-e2e-id=\"previousPage\" ng-click=\"goPrevious()\" ng-if=\"page> 1\"><a href=\"javascript://\">&lt;</a></li><li data-e2e-id=\"pageNum\" ng-repeat=\"num in visibleRange\" ng-class=\"{active: num === page}\" ng-click=\"setPage(num)\"><a href=\"javascript://\">{{num}}</a></li><li data-e2e-id=\"nextPage\" ng-click=\"goNext()\" ng-class=\"{disabled: page === totalPages}\"><a href=\"javascript://\">&gt;</a></li><li data-e2e-id=\"lastPage\" ng-click=\"goLast()\" ng-class=\"{disabled: page === totalPages}\"><a href=\"javascript://\">»</a></li></ul></div>");
            templateCache.put(templateRoot + "/paginator/paginator-stats.dir.html", "<span ng-show=\"viewStartAt + viewEndAt + total\">{{'customerAdminTools.pagination.stats' | localize: [viewStartAt, viewEndAt, total]}}</span>");
        }]);
;/**
 * token-enabled-src.dir.js - directive for simple loader within an area
 */

angular.module('Realize.ui.tokenEnabledSrc', [])
    .directive('tokenEnabledSrc', ['$q', '$http', function($q, $http) {
        return {
            restrict: 'A',
            priority: -1, // it needs to run after the attributes are interpolated
            link: function(scope, el, attrs) {
                attrs.$observe('tokenEnabledSrc', function(value) {
                    var promise,
                        tokenUrl;

                    if(!value) {
                        return;
                    }

                    // if need to get ipad token, get it
                    if(value.search('{IPAD_TOKEN}') >= 0) {
                        tokenUrl = attrs.ipadTokenUrl;

                        promise = $http.get(tokenUrl).then(function(response) {
                            // Slice to strip beginning and end double quotes
                            return value.replace('{IPAD_TOKEN}', response.data);
                        });
                    } else {
                        promise = $q.when(value);
                    }

                    promise.then(function(finalUrl) {
                        attrs.$set('src', finalUrl);
                    });
                });
            }
        };
    }]);;// this is actually an override of ui.bootstrap's
angular.module('Realize.ui.typeahead', [
    'ui.bootstrap.typeahead',
    'ui.bootstrap.tpls', // TODO: specific template modules?
    'Realize.core.services.messages',
    'Realize.ui.paths',
    'Realize.ui.templates'
])
    .config(['$provide',
        function($provide) {
            $provide.decorator('typeaheadDirective', ['$delegate',
                function($delegate) {
                    var typeahead = $delegate[0];

                    typeahead.priority = -1;

                    var linkOriginal = typeahead.link;

                    typeahead.compile = function() {
                        var linkNew = function(scope, element, attrs, modelCtrl) {
                            var typeaheadPopup = "[typeahead-popup]";

                            //fixes RGHT-10592 - tab should move focus away without selecting item
                            var closeOnTab = scope.$eval(attrs.typeaheadCloseOnTab);
                            if (angular.isDefined(closeOnTab)) {
                                $(element).bind('keydown', function(evt) {
                                    if (evt.which === 9) { //tab(9)
                                        evt.stopImmediatePropagation();
                                        $(typeaheadPopup).scope().matches = [];
                                        $(typeaheadPopup).scope().active = -1;
                                        scope.$digest();
                                    }
                                });
                            }

                            //on focus, open popup with matches
                            element.bind('focus', function() {
                                modelCtrl.$setViewValue(modelCtrl.$viewValue); //triggers getMatches
                                //scope.$apply();
                            });

                            linkOriginal.apply(this, arguments);
                        };

                        return linkNew;
                    };
                    return $delegate;
                }
            ]);

            $provide.decorator('typeaheadPopupDirective', ['$delegate', 'REALIZE_UI_ROOT_PATH', '$log',
                function($delegate, REALIZE_UI_ROOT_PATH, $log) {
                    var typeaheadPopup = $delegate[0];

                    //typeaheadPopup.templateUrl = REALIZE_UI_ROOT_PATH + '/typeahead/typeahead-popup.html';

                    var linkOriginal = typeaheadPopup.link;

                    typeaheadPopup.compile = function() {
                        var linkNew = function(scope, el, attrs) {
                            linkOriginal.apply(this, arguments);

                            var typeaheadDropdown = $('.typeahead.dropdown-menu'),
                                scrollDownInterval = scope.$eval(attrs.typeaheadScrollDownInterval) || 3,
                                hasScrolledDown,
                                hasScrolledUp,
                                hasScrolledToBottom;

                            scope.$watch('active', function(active, oldVal) {
                                hasScrolledDown = active > oldVal && active % scrollDownInterval === 0;
                                hasScrolledUp = active < oldVal;
                                hasScrolledToBottom = active === scope.matches.length - 1;

                                if (hasScrolledDown || hasScrolledUp || hasScrolledToBottom) {
                                    //fixes RGHT-10591 - scroll for keyboard mode
                                    typeaheadDropdown.scrollTo('li:eq(' + active + '):has(a.kb-mode)', 0, {
                                        axis: 'y'
                                    });
                                }
                            });

                            scope.isOpen = function() {
                                var isOpen = scope.matches.length > 0;
                                if (!isOpen) {
                                    scope.$emit('typeaheadPopup.noMatches');
                                }

                                return isOpen;
                            };
                        };

                        return linkNew;
                    };
                    return $delegate;
                }
            ]);

            $provide.decorator('typeaheadMatchDirective', ['$delegate', 'Messages',
                function($delegate, Messages) {
                    var typeaheadMatch = $delegate[0];

                    var linkOriginal = typeaheadMatch.link;

                    typeaheadMatch.compile = function() {
                        var linkNew = function(scope) {
                            linkOriginal.apply(this, arguments);
                            scope.Messages = Messages;
                        };

                        return linkNew;
                    };
                    return $delegate;
                }
            ]);
        }
    ]);;angular.module("Realize.ui.paths",["Realize.core.configs.SCRIPT_PATH"]).provider("REALIZE_UI_ROOT_PATH",function(){return{$get:["SCRIPT_PATH",function(c){return c+"/realize.ui"}]}});angular.module("Realize.ui.keyCodes",[]).constant("KEY_CODES",{TAB:9,ENTER:13,SHIFT:16,CTRL:17,ALT:18,ESC:27,SPACE:32,LEFT:37,UP:38,RIGHT:39,DOWN:40,CMD_LEFT:91,CMD_RIGHT:92});angular.module("Realize.ui.templates",["Realize.ui.paths"]);angular.module("Realize.ui","Realize.ui.templates,Realize.ui.paths,Realize.ui.keyCodes,Realize.ui.areaLoader,Realize.ui.mediaIcon,Realize.ui.modal,Realize.ui.numberIcon,Realize.ui.alert,Realize.ui.alertService,Realize.ui.inlineNotification,Realize.ui.inlineAlertService,Realize.ui.messageBasedAlert,Realize.ui.quickLink,Realize.ui.quickLinkMenu,Realize.ui.qlClick,Realize.ui.quickList,Realize.ui.realizeFooter,Realize.ui.tokenEnabledSrc,Realize.ui.activeState,Realize.ui.checkboxCustom,Realize.ui.paginator".split(","));angular.module("Realize.ui.activeState",["ui.router"]).directive("activeState",[function(){return{restrict:"A",scope:{activeState:"@",activeStateClass:"@?"},controller:["$scope","$element","$state",function(c,a,e){c.currentState="";var b=c.activeStateClass||"selected";c.$on("$stateChangeStart",function(a,d){c.currentState=d.name});c.$on("$stateChangePrevented",function(a,d,b,e){if(e&&e.name)c.currentState=e.name});c.$watch("currentState",function(){RegExp("^"+c.activeState,"gi").test(c.currentState)?
a.addClass(b):a.removeClass(b)});c.currentState=e.current.name}]}}]);angular.module("Realize.ui.alert",[]).constant("ALERT_TTL",5E3).directive("alert",["$timeout","$log","ALERT_TTL",function(c,a,e){return{restrict:"EA",replace:!0,transclude:!0,scope:{alertType:"@",alertOn:"="},template:'<div class="alert alert-{{alertType}} fade in" ng-transclude ng-show="alertOn"></div>',link:function(a,f,d){function j(){a.$apply(function(){a.alertOn=!1})}a.$watch("alertOn",function(f){f&&a.$eval(d.autoClose)&&c(j,e)});f.find(".close").on("click",j);a.$on("$destroy",function(){f.find(".close").off("click")})}}}]);angular.module("Realize.ui.alertService",[]).factory("AlertService",["$rootScope",function(c){var a={alerts:[]};a.addAlert=function(e,b,f,d){a.alerts.push({type:e,icon:b,msg:f,lifespan:d})};a.alertIsSet=function(){return a.alerts[0]&&""!==a.alerts[0].msg};c.$on("$routeChangeStart",function(){a.alerts[0]&&a.alerts[0].lifespan&&(a.alerts[0].lifespan--,0>=a.alerts[0].lifespan&&a.alerts.splice(0,1))});return a}]);angular.module("Realize.ui.firstVisitAlert",["Realize.ui.paths","Realize.ui.templates","Realize.core.filters.localize"]).directive("firstVisitAlert",["$log","REALIZE_UI_ROOT_PATH",function(c,a){return{replace:!0,scope:{title:"=firstVisitAlert",description:"=",userClose:"=closeFn"},templateUrl:a+"/alerts/firstVisitAlert.html",link:function(a){a.closeFn=function(b){angular.isFunction(a.userClose)&&a.userClose.call(null,b)}}}}]);angular.module("Realize.ui.inlineAlertService",[]).factory("InlineAlertService",["$log",function(c){var a={alerts:[]};a.addAlert=function(e,b){c.debug("addAlert: ",e,b);a.getAlert(e,!0);a.alerts.push({id:e,alert:b})};a.getAlert=function(c,b){var f;f=_.find(a.alerts,function(a){return a.id===c});b&&f&&a.removeAlert(f);return f};a.removeAlert=function(c){a.alerts.splice(a.alerts.indexOf(c),1)};return a}]);angular.module("Realize.ui.inlineNotification",["Realize.ui.inlineAlertService"]).directive("inlineNotification",["$log","$timeout","InlineAlertService",function(c,a,e){return{link:function(b,f,d){function j(b){var c=angular.element(i).append(b.alert.msg),e=b.alert.type;a(function(){l=d.inlineNotificationTarget?f.find(d.inlineNotificationTarget):f;f.addClass(e+"Row");f.hasClass("itemRow")||f.parent().addClass(e+"Row");l.prepend(c)},1);a(function(){var a=l.find(".success-message");a.fadeOut(function(){a.remove();
f.removeClass(e+"Row");f.hasClass("itemRow")||f.parent().removeClass(e+"Row")})},g)}var h=b.$eval(d.inlineNotification),l,i='<div class="success-message"></div>',g=4E3;d.$observe("inlineNotification",function(){h=b.$eval(d.inlineNotification)});b.$watch(function(){return e.getAlert(h,!0)},function(a){a&&(c.debug("new alert",a),j(a))})}}}]);angular.module("Realize.ui.messageBasedAlert",["Realize.ui.paths","Realize.ui.templates","Realize.ui.alertService"]).directive("messageBasedAlert",["$timeout","$rootScope","REALIZE_UI_ROOT_PATH","AlertService",function(c,a,e,b){return{replace:!0,scope:{autoClose:"=",alertMessageDetails:"=",alertOn:"="},templateUrl:e+"/alerts/messageBasedAlert.html",link:function(a,d){var e=function(){a.$apply(function(){a.alertOn=!1;a.alertMessageDetails=null;b.alerts.splice(0,1)})};a.$watch("alertMessageDetails",
function(){a.alertMessageDetails&&a.autoClose&&(d.show(),c(function(){d.fadeOut("slow",e)},5E3))})}}}]);angular.module("Realize.ui.areaLoader",[]).directive("areaLoader",[function(){return{restrict:"EA",replace:!0,template:'<div class="area-loader"><i class="icon-spinner icon-spin"></i></div>'}}]);angular.module("Realize.ui.checkboxCustom",["Realize.ui.keyCodes"]).directive("checkboxCustom",["$log","KEY_CODES",function(c,a){return{require:"ngModel",template:function(a,b){return['<div class="customCheckbox"><i tabindex="0" class="customCheckboxInput" role="checkbox" aria-labelledby="',b.labelId,'" aria-checked="{{isChecked}}"></i><span id="',b.labelId,'" class="customCheckboxLabel">',b.label,"</span></div>"].join("")},replace:!0,link:function(c,b,f,d){c.isChecked=c.$eval(f.ngModel);var j=b.find("i.customCheckboxInput"),
h=b.find("span.customCheckboxLabel"),l,i,g,k;f.ngDisabled&&f.$observe("ngDisabled",function(a){c.$eval(a)?b.addClass("disabled"):b.removeClass("disabled")});g=f.classOn||"icon-check";k=f.classOff||"icon-check-empty";l=function(a){j.removeClass(a?k:g).addClass(a?g:k)};i=function(a){a&&(a.preventDefault(),a.stopPropagation());if(!c.$eval(f.ngDisabled))c.isChecked=!d.$viewValue,d.$setViewValue(c.isChecked),l(d.$viewValue),c.$apply(function(a){if(f.callback)a[f.callback](f.id,d.$viewValue)})};c.$watch(f.ngModel,
function(a){l(a)});j.click(i);h.click(i);j.keydown(function(d){d.which===a.SPACE&&(d.preventDefault(),i())})}}}]);angular.module("Realize.ui.dropdownA11y",["Realize.core.services.browserInfo"]).directive("dropdownA11y",["$log","KEY_CODES","$timeout","BrowserInfo",function(c,a,e,b){var f=function(a,b){var f;for(f=1;f<arguments.length;f++)if(a.which===arguments[f])return!0;return!1};return{restrict:"A",link:function(d,c,h){var l=c.next("[role=menu]"),i,g,k,m=function(a){a.focus();k=a},n=function(){i=l.find("a[href], :input");m(i.first())},p=function(a){var d=k.attr("ng-click")||k.parent().attr("ql-click");angular.isDefined(d)&&
(b.browser.isMSIE&&9>=b.browser.msieVersion&&a.preventDefault(),k.scope().$apply(function(){k.scope().$eval(d)}),m(c))},r=d.$eval(h.ddA11yToggleOnly);c.keydown(function(b){var h=f(b,a.DOWN);f(b,a.SPACE,a.ENTER)&&(b.preventDefault(),c.click());h&&(b.preventDefault(),c.parent().hasClass("open")||c.click(),angular.isDefined(d.loadingTools)&&d.loadingTools?d.$watch("loadingTools",function(a){a||e(function(){n()},0)}):n())});l.find("a").attr("tabindex",-1);l.keydown(function(b){switch(b.which){case a.ESC:b.preventDefault();
b.stopPropagation();c.click();m(c);break;case a.UP:if(r)break;b.preventDefault();g=i.index(c.parent().find(":focus"));0===g?m(i.eq(i.length-1)):m(i.eq(g-1));break;case a.DOWN:if(r)break;b.preventDefault();g=i.index(c.parent().find(":focus"));g===i.length-1?m(i.eq(0)):m(i.eq(g+1));break;case a.ENTER:if(r)break;angular.isDefined(k)&&(p(b),e(function(){},0));c.click()}})}}}]);angular.module("Realize.ui.dropdownToggle",["Realize.ui.dropdownA11y","ui.bootstrap.dropdown","ui.bootstrap.tpls"]).config(["$provide",function(c){c.decorator("dropdownToggleDirective",["$delegate","$document",function(a,c){var b=null,f=angular.noop,d=function(a,d){a.$watch("$location.path",function(){f()});d.parent().bind("click",function(){f()});d.bind("click",function(a){var j=d===b;a.preventDefault();a.stopPropagation();b&&f();j||($(".dropdown.open").removeClass("open"),d.parent().addClass("open"),
d.parent().find(".dropdown-menu").attr({"aria-hidden":"false","aria-expanded":"true"}),b=d,f=function(a){a&&(a.preventDefault(),a.stopPropagation());c.unbind("click",f);d.parent().removeClass("open");d.parent().find(".dropdown-menu").attr({"aria-hidden":"true","aria-expanded":"false"});f=angular.noop;b=null},c.bind("click",f))})};a[0].compile=function(){return d};return a}])}]);angular.module("Realize.ui.realizeFooter",["Realize.ui.paths","Realize.ui.templates","Realize.core.filters.localize"]).directive("realizeFooter",["REALIZE_UI_ROOT_PATH",function(c){return{restrict:"EA",scope:{BUILD_NUMBER:"@buildNumber",SHOW_BUILD_NUMBER:"=showBuildNumber",CREDITS:"@credits",USER_AGREEMENT:"@userAgreement",PRIVACY_POLICY:"@privacyPolicy"},replace:!0,templateUrl:c+"/footer/realizeFooter.html"}}]);angular.module("Realize.ui.infoDropdown",["Realize.ui.paths","Realize.ui.templates"]).directive("infoDropdown",["REALIZE_UI_ROOT_PATH",function(c){return{restrict:"EA",replace:!0,transclude:!0,scope:{infoDropdownTitleClosed:"@",infoDropdownTitleOpen:"@",infoDropdownHeader:"@",initialState:"="},templateUrl:c+"/info-dropdown/info-dropdown.html",link:function(a){a.isOpen=!!a.initialState;a.toggleOpen=function(){a.isOpen=!a.isOpen}}}}]);angular.module("Realize.ui.mediaIcon",["Realize.ui.mediaIconFilter","Realize.core.configs.MEDIA_PATH"]).directive("mediaIcon",["$log","$filter","MEDIA_PATH",function(c,a,e){return{scope:!0,replace:!0,transclude:!0,template:'<div class="mediaIcon with-tab" title="{{ content.$getTitle() }}"><img ng-src="{{ src }}" alt="{{ content.mediaType }}" fallback-strategy="fallback" /><span ng-transclude></span></div>',compile:function(){var b=e+"/skins/default/images",f=b+"/default_icons";return function(d,e,
h){d.content=d.$eval(h.mediaIcon);d.mediaType=a("mediaIcon")(d.content);if(angular.isDefined(d.mediaType)){e.addClass(d.mediaType);var l=b+"/mediatype/icon/",i=e.hasClass("large"),g="tool"===h.type,k=function(){var a=l;i&&(a+="large/");var b=a+d.mediaType+"@2x.png",c;g?(e.removeClass("mediaIcon").removeClass("with-tab"),d.fallback=[f+"/tool@2x.png"],b=d.content.$getThumbnailUrl("TOOL",!1)):(d.content.root?("dropdown"===h.type?(c=f+"/no_program_dropdown@2x.png",b=d.content.$getThumbnailUrl("PROGRAM_SUBNAV")):
"course"===h.type?(c=f+"/no_program_thumb_course@2x.png",b=d.content.$getThumbnailUrl("PROGRAM"),e.removeClass("mediaIcon")):(b=i?"large":"small",c=f+"/no_program_home"+b+"@2x.png",b=d.content.$getThumbnailUrl("HOME",i)),e.removeClass("with-tab")):"etext"===d.mediaType&&"program"===h.type?(c=f+"/no_program_etext@2x.png",b=d.content.$getThumbnailUrl("ETEXT",!1)||c,e.removeClass("with-tab")):("interactive_media"===d.mediaType?b=a+"activity@2x.png":"selected_reading"===d.mediaType||"leveled_reader"===
d.mediaType?b=a+"etext@2x.png":"center"===d.mediaType?(b=i?"_grid":"",b=a+"center@2x.png"):d.content.$isGooruItem&&d.content.$isGooruItem()&&(b=f+"/gooru_icon.png"),c=b,d.content.thumbnailUrls&&d.content.thumbnailUrls.length&&((a=d.content.$getThumbnailUrl("TIER",h.large?d.$eval(h.large):!1))?(b=a,e.removeClass("with-tab").removeClass("mediaIcon").addClass("customImage")):e.hasClass("customImage")&&e.removeClass("customImage").addClass("mediaIcon").addClass("with-tab"))),d.fallback=[c],d.$on("imageFallback",
function(a,b){a.targetScope.content&&!a.targetScope.content.$isGooruItem()&&b.parent().hasClass("customImage")&&b.parent().addClass("mediaIcon with-tab fallback-applied")}));if(!b||b===c)b=d.fallback.shift();0<b.indexOf("@2x")&&d.fallback.unshift(b.replace("@2x",""));d.src=b};k();h.$observe("large",function(a){(i=d.$eval(a))?e.addClass("large"):e.removeClass("large");k()})}else d.content.$isGooruItem&&d.content.$isGooruItem()?d.src=f+"/gooru_icon.png":c.error("Media type is undefined!",d.content)}}}}]);angular.module("Realize.ui.mediaIconFilter",["Realize.core.filters.underscores"]).filter("mediaIcon",["$filter",function(c){return function(a){if(angular.isDefined(a)&&!(null===a||!angular.isDefined(a.mediaType)||!angular.isDefined(a.fileType))){var e=angular.lowercase(a.mediaType),b=angular.lowercase(a.fileType);if("document"===e){if(-1!==b.indexOf("doc")||-1!==b.indexOf("txt")||-1!==b.indexOf("rtf"))return"document";if(-1!==b.indexOf("ppt"))return"slideshow";if(-1!==b.indexOf("pdf"))return"pdf"}return"Visual Learning"===
a.contentType?"visual_learning":-1!==e.indexOf("remediation")?"lesson":c("underscores")(e)}}}]);angular.module("Realize.ui.modal",["Realize.ui.templates","Realize.ui.keyCodes","Realize.core.services.messages","Realize.core.configs.LOGOUT_URL","Realize.core.filters.localize"]).factory("ModalGet",["$http","$templateCache","$q","$log",function(c,a,e,b){return function(f){return c.get(f,{cache:a}).then(function(a){b.log("modal http",f);return a.data},function(a){b.warn("[Modal] getModalHtml ERROR: ",a);return e.reject(a)})}}]).factory("Modal",["ModalGet","$compile","$log","$timeout","Messages",
"REALIZE_UI_ROOT_PATH","$q","$rootScope","$window","KEY_CODES",function(c,a,e,b,f,d,j,h,l,i){var g=null,k=$(".modalRegion");c(d+"/modal/modal_progress.html");var m=function(){var a=j.defer();angular.isElement(g)?(g.addClass("hide"),b(function(){g.modal("hide");k.empty();a.resolve();$(".modal-backdrop").remove()},400),$("#skipNav a").attr("tabindex",1),$("#globalNav .section a").attr("tabindex",2),$("#usernameDropdown").attr("tabindex",5),$("#globalSearch #SearchTextInput, #globalSearch button").attr("tabindex",
3),$("#sectionNav a").removeAttr("tabindex",-1),$("#footer a").removeAttr("tabindex",-1),$("#sectionBody a, #sectionBody area, #sectionBody button, #sectionBody input, #sectionBody object, #sectionBody select, #sectionBody textarea").removeAttr("tabindex",-1),$('#skipTarget, div.customCheckbox input[type="checkbox"]').attr("tabindex",-1),$("body").children().removeAttr("aria-hidden","true"),$(".modalRegion").removeAttr("aria-hidden","false"),$(".modal").off("hide")):a.resolve();return a.promise},
n=function(d,h){return c(d).then(function(d){return m().then(function(){g=$(d);k.hide().append(g);h.getMessage=f.getMessage;g.on("shown",function(){a(g)(h);b(function(){"assignmentModal"===g.attr("id")&&0===g.find(".modal-header h1").length?(e.warn("AssignmentModal's scope is destoryed, not displaying modal"),m()):k.show();$(g).find('[auto-focus=""]:visible').focus()},10);$(g).keydown(function(a){a.which===i.ESC&&m()})});g.modal({backdrop:"static",keyboard:!1});$("#skipNav a").attr("tabindex",-1);
$("#globalNav .section a").attr("tabindex",-1);$("#usernameDropdown").attr("tabindex",-1);$("#globalSearch #SearchTextInput, #globalSearch button").attr("tabindex",-1);$("#sectionNav a").attr("tabindex",-1);$("#footer a").attr("tabindex",-1);$("#sectionBody a, #sectionBody area, #sectionBody button, #sectionBody input, #sectionBody object, #sectionBody select, #sectionBody textarea, #sectionBody a").attr("tabindex",-1);$("body").children().attr("aria-hidden","true");$(".modalRegion").attr("aria-hidden",
"false");$(".modal-backdrop").attr("tabindex",-1);$(".quick-list-dropdown .open").removeClass("open");$(g).on("hidden",function(){h.$broadcast("modal.hidden")})},function(a){e.error("error destroying dialog",a);return j.reject(a)})},function(a){e.error("error building dialog",a);return j.reject(a)})},p={OK:"OK",CANCEL:"CANCEL"};return{showDialog:n,hideDialog:function(){return m()},progressDialog:function(a,f){angular.forEach(f,function(b,d){a[d]=b});if(angular.isUndefined(a.setProgress))e.log("[[ WARNING ]] progress-modal expecting a setProgress method, none found"),
a.setProgress=function(b){a.progressPercent=b};if(angular.isUndefined(a.progressPercent))a.progressPercent=0;if(angular.isUndefined(a.progressIncrement))a.progressIncrement=10;var c,h;a.fakeProgress=function(d){c=d||100;b(function t(){0<100-(a.progressPercent+a.progressIncrement)&&(a.setProgress(a.progressPercent+a.progressIncrement),h=b(t,c))},c)};a.progressComplete=function(d){h&&b.cancel(h);d=d||1E3;a.setProgress(100);return{then:function(a){b(a,d)}}};var g=n(d+"/modal/modal_progress.html",a);
g.then(function(){return a},function(a){e.error("error building progress dialog",a);return j.reject(a)});a.then=function(b){g.then(b);return a};a.close=function(){m()};return a},toolDialog:function(a,b,c){b=angular.copy(b);b.pages=b.previews||[];if(c)b.title=f.getCode(c);var e=a.$new(!0);e.selectedTool=b;e.currentPage=1;e.close=function(){m().then(function(){e.$destroy()})};e.download=function(a,b){a.stopPropagation();a.preventDefault();0<=b.restrictedDownloadContent.search(/download/gi)&&l.open(b.attachments[0].downloadURL,
"_blank")};return n(d+"/modal/tool_popup_modal.html",e)},simpleDialog:function(a,b,c,e){var e=e||{},g=h.$new(!0),i=function(){m().then(function(){g.$destroy()})},l=j.defer(),k=l.promise,q=[],s=!1;if(angular.isDefined(c)&&angular.isObject(c)){var o=c[p.OK];(c=c[p.CANCEL])&&o?k=k.then(o.handler,c.handler):c?k=k.then(null,c.handler):o&&(s=!0,k=k.then(o.handler,null));c&&q.push({title:c.title?f.getMessageOrDefault(c.title,c.title):f.getMessageOrDefault("Cancel","Cancel"),isDefault:!!c.isDefault,clickHandler:function(){l.reject()}});
o&&q.push({title:o.title?f.getMessageOrDefault(o.title,o.title):f.getMessageOrDefault("Ok","Ok"),isDefault:!!o.isDefault,clickHandler:function(){l.resolve()}})}else s=!0,q.push({title:f.getMessageOrDefault("OK","OK"),isDefault:!0,clickHandler:function(){l.resolve()}});k.then(i,i);if(angular.isDefined(e.id))g.dialogId=e.id;g.title=f.getMessageOrDefault(a,a);g.body=f.getMessageOrDefault(b,b);g.closeBtnClickHandler=s?l.resolve:l.reject;g.buttons=q;g.isClosable=angular.isDefined(e.isClosable)?e.isClosable:
!0;return n(d+"/modal/simple_dialog.html",g)},BUTTONS:p}}]).factory("SessionTimeoutModal",["$rootScope","Modal","$window","LOGOUT_URL","REALIZE_UI_ROOT_PATH",function(c,a,e,b,f){var d=f+"/modal/session_timeout_dialog.html",j=function(){e.location.href=b};return{showDialog:function(){var b=c.$new();b.close=function(b){b.stopPropagation();b.preventDefault();a.hideDialog()};b.$on("modal.hidden",j);return a.showDialog(d,b)},setTemplate:function(a){d=a},setOnHidden:function(a){j=a}}}]);angular.module("Realize.ui.numberIcon",[]).directive("numberIcon",[function(){return{restrict:"EA",transclude:!0,replace:!0,template:'<span class="number-icon"><span class="number-icon-number" ng-transclude></span></span>'}}]);angular.module("Realize.ui.paginatorStats",["Realize.ui.paths","Realize.ui.templates","Realize.core.filters.localize"]).directive("paginatorStats",["REALIZE_UI_ROOT_PATH",function(c){return{restrict:"EA",templateUrl:c+"/paginator/paginator-stats.dir.html",replace:!1,scope:{total:"=",page:"=",limit:"="},link:function(a){a.$watch("total + page + limit",function(){var c=parseInt(a.total,10),b=parseInt(a.page,10),f=parseInt(a.limit,10);a.viewStartAt=(b-1)*f+1;a.viewEndAt=Math.min(b*f,c);a.viewTotal=c})}}}]);angular.module("Realize.ui.paginator",["Realize.ui.paths","Realize.ui.templates"]).directive("paginator",["REALIZE_UI_ROOT_PATH",function(c){return{scope:{page:"=",total:"@",limit:"@",range:"@",isToScrollUp:"@",scrollTarget:"="},replace:!1,templateUrl:c+"/paginator/paginator.dir.html",controller:["$scope","$element","$attrs","$timeout",function(a,c){a.setPage=function(b){if(!c.attr("disabled"))a.$emit("paginator.onBeforePageChange",b,a.page).defaultPrevented?a.$emit("paginator.pageChangePrevented",
b,a.page):(a.page=b,a.isToScrollUp&&$("html, body").animate({scrollTop:a.scrollTarget&&a.scrollTarget.offset()?a.scrollTarget.offset().top:0}),a.$emit("paginator.pageChangeSuccess",b))};a.goFirst=function(){a.setPage(1)};a.goLast=function(){a.setPage(a.totalPages)};a.goNext=function(){a.setPage(a.page+1)};a.goPrevious=function(){a.setPage(a.page-1)};a.$on("paginator.page.changed",function(b,c){a.setPage(c)});a.$watch("total + page",function(){if(!isNaN(a.total)&&!isNaN(a.limit)&&!isNaN(a.page)){a.totalPages=
parseInt(Math.ceil(a.total/a.limit),10);var b;b=a.page;var c=a.totalPages,d=1;if(10<c&&(d=b-Math.floor(5),10>b||b>c-10))b>c-Math.ceil(5)?d=c-10:b<Math.ceil(5)&&(d=1);b=_.range(d||1,Math.min(d+10,c)+1);a.visibleRange=b}})}]}}]);angular.module("Realize.ui.qlClick",[]).directive("qlClick",["$parse",function(c){return{link:function(a,e,b){var f=c(b.qlClick);e.on("click",function(b){f(a.$parent,{$event:b});!a.$$phase&&!a.$root.$$phase&&a.$apply()})}}}]);angular.module("Realize.ui.quickLink",[]).directive("quickLink",["$log",function(){return{template:'<li class="quick-link"><a href="javascript://"><i class="icon-{{ icon }}"></i>{{ text }}</a></li>',replace:!0,scope:!0,link:function(c,a,e){"menu"===a.parent().attr("role")&&a.find("a").attr("role","menuitem");e.$observe("href",function(){""!==e.href&&(a.find("a").attr("href",e.href),e.target&&a.find("a").attr("target",e.target))});c.hidden=c.$eval(e.ngHide)||angular.isDefined(e.ngShow)?!c.$eval(e.ngShow):
!1;c.icon=e.icon;c.$watch(e.text,function(a){c.text=a});c.$watch(e.ngHide,function(b,f){if(angular.isDefined(b)&&b!==f)c.hidden=!!b,a.parent().trigger("quicklinkDisplayChange")});c.$watch(e.ngShow,function(b,f){if(angular.isDefined(b)&&b!==f)c.hidden=!b,a.parent().trigger("quicklinkDisplayChange")})}}}]);angular.module("Realize.ui.quickLinkMenu",[]).directive("quickLinkMenu",["$log",function(){return{template:'<li><a ng-click="toggleClick($event);" class="dropdown-toggle" role="button" dropdown-a11y href="javascript://"><i class="icon-{{ toggleIcon }}"></i>{{ toggleText }}<i class="icon-caret-{{ toggleDirection }}"></i></a><ul class="dropdown-menu pull-right quick-link-menu-items" role="menu" ng-transclude></ul></li>',replace:!0,scope:!0,transclude:!0,link:function(c,a,e){var b=c.$eval(e.quickLinkMenu);
c.toggleIcon=b.icon;c.toggleText=b.text;c.toggleDirection=b.direction;c.toggleClick=function(a){b.toggleClick&&angular.isFunction(b.toggleClick)&&b.toggleClick.call(null,a)};c.toggleIcon||a.find("> a i:first").remove();var f=a.find(".quick-link-menu-items").children();c.$on("collapse",function(){a.after(f);a.hide()});c.$on("expand",function(){a.find(".quick-link-menu-items").append(f);a.css("display","inline-block")})}}}]);angular.module("Realize.ui.quickList",[]).directive("quickList",["$log","$parse","$compile",function(c,a,e){return{restrict:"AE",template:'<ul class="quicklinks" ng-transclude></ul>',replace:!0,transclude:!0,controller:["$scope","$element",function(a,c){var d=this;d.$visibleChildCount=0;d.$calcVisibleChildren=function(){d.$visibleChildCount=0;angular.forEach(c.children(".quick-link"),function(a){!1===angular.element(a).scope().hidden&&d.$visibleChildCount++})}}],link:function(b,c,d,j){function h(){var a=
$(m);e(a)(b);c.after(a).removeClass("quicklinks").addClass("dropdown-menu").appendTo(a.find("li"));n=!0;b.$broadcast("collapse")}function l(){var a=c.parents("ul.quick-list-dropdown");0<a.length&&(a.after(c),a.remove(),c.removeClass("dropdown-menu").addClass("quicklinks"));n=!1;b.$broadcast("expand")}b.menuDirection=b.$eval(d.isdropup)?"dropup":"dropdown";b.caretDirection=b.$eval(d.isdropup)?"icon-caret-up":"icon-caret-down";var i=angular.isDefined(d.e2eId)?' data-e2e-id="'+d.e2eId+'"':"",g=angular.isDefined(d.ngShow)?
' ng-show="'+d.ngShow+'"':"",k=angular.isDefined(d.ngHide)?' ng-hide="'+d.ngHide+'"':"",m=['<ul class="quick-list-dropdown quicklinks"'+g+k+">",'<li class="quick-list-dropdown-trigger {{ menuDirection }}"'+i+">",'<a href="javascript://" class="dropdown-toggle" data-toggle="dropdown" role="button"><i class="icon-',d.collapsedIcon,'"></i>',d.collapsedLabel,'<i class="{{ caretDirection }}"></i></a></li></ul>'].join(""),n=!1;b.$watch(d.isdropup,function(a,c){if(!(angular.isDefined(a)&&a===c))b.menuDirection=
a?"dropup":"dropdown",b.caretDirection=a?"icon-caret-up":"icon-caret-down"});j.$calcVisibleChildren();c.on("quicklinkDisplayChange",function(){var b=a(d.collapsed);j.$calcVisibleChildren();1>=j.$visibleChildCount?l():b()&&h()});b.$watch(d.collapsed,function(a,b){!angular.isUndefined(a)&&!angular.isUndefined(b)&&(j.$calcVisibleChildren(),!n&&a&&1<j.$visibleChildCount?h():n&&l())})}}}]);angular.module("Realize.ui.paths",["Realize.core.configs.SCRIPT_PATH"]).provider("REALIZE_UI_ROOT_PATH",function(){return{$get:["SCRIPT_PATH",function(c){return c+"/realize.ui"}]}});angular.module("Realize.ui.keyCodes",[]).constant("KEY_CODES",{TAB:9,ENTER:13,SHIFT:16,CTRL:17,ALT:18,ESC:27,SPACE:32,LEFT:37,UP:38,RIGHT:39,DOWN:40,CMD_LEFT:91,CMD_RIGHT:92});angular.module("Realize.ui.templates",["Realize.ui.paths"]);angular.module("Realize.ui","Realize.ui.templates,Realize.ui.paths,Realize.ui.keyCodes,Realize.ui.areaLoader,Realize.ui.mediaIcon,Realize.ui.modal,Realize.ui.numberIcon,Realize.ui.alert,Realize.ui.alertService,Realize.ui.inlineNotification,Realize.ui.inlineAlertService,Realize.ui.messageBasedAlert,Realize.ui.quickLink,Realize.ui.quickLinkMenu,Realize.ui.qlClick,Realize.ui.quickList,Realize.ui.realizeFooter,Realize.ui.tokenEnabledSrc,Realize.ui.activeState,Realize.ui.checkboxCustom,Realize.ui.paginator".split(","));
angular.module("Realize.ui.activeState",["ui.router"]).directive("activeState",[function(){return{restrict:"A",scope:{activeState:"@",activeStateClass:"@?"},controller:["$scope","$element","$state",function(c,a,e){c.currentState="";var b=c.activeStateClass||"selected";c.$on("$stateChangeStart",function(a,b){c.currentState=b.name});c.$on("$stateChangePrevented",function(a,b,e,h){if(h&&h.name)c.currentState=h.name});c.$watch("currentState",function(){RegExp("^"+c.activeState,"gi").test(c.currentState)?
a.addClass(b):a.removeClass(b)});c.currentState=e.current.name}]}}]);
angular.module("Realize.ui.alert",[]).constant("ALERT_TTL",5E3).directive("alert",["$timeout","$log","ALERT_TTL",function(c,a,e){return{restrict:"EA",replace:!0,transclude:!0,scope:{alertType:"@",alertOn:"="},template:'<div class="alert alert-{{alertType}} fade in" ng-transclude ng-show="alertOn"></div>',link:function(a,f,d){function j(){a.$apply(function(){a.alertOn=!1})}a.$watch("alertOn",function(f){f&&a.$eval(d.autoClose)&&c(j,e)});f.find(".close").on("click",j);a.$on("$destroy",function(){f.find(".close").off("click")})}}}]);
angular.module("Realize.ui.alertService",[]).factory("AlertService",["$rootScope",function(c){var a={alerts:[]};a.addAlert=function(c,b,f,d){a.alerts.push({type:c,icon:b,msg:f,lifespan:d})};a.alertIsSet=function(){return a.alerts[0]&&""!==a.alerts[0].msg};c.$on("$routeChangeStart",function(){a.alerts[0]&&a.alerts[0].lifespan&&(a.alerts[0].lifespan--,0>=a.alerts[0].lifespan&&a.alerts.splice(0,1))});return a}]);
angular.module("Realize.ui.firstVisitAlert",["Realize.ui.paths","Realize.ui.templates","Realize.core.filters.localize"]).directive("firstVisitAlert",["$log","REALIZE_UI_ROOT_PATH",function(c,a){return{replace:!0,scope:{title:"=firstVisitAlert",description:"=",userClose:"=closeFn"},templateUrl:a+"/alerts/firstVisitAlert.html",link:function(a){a.closeFn=function(b){angular.isFunction(a.userClose)&&a.userClose.call(null,b)}}}}]);
angular.module("Realize.ui.inlineAlertService",[]).factory("InlineAlertService",["$log",function(c){var a={alerts:[]};a.addAlert=function(e,b){c.debug("addAlert: ",e,b);a.getAlert(e,!0);a.alerts.push({id:e,alert:b})};a.getAlert=function(c,b){var f;f=_.find(a.alerts,function(a){return a.id===c});b&&f&&a.removeAlert(f);return f};a.removeAlert=function(c){a.alerts.splice(a.alerts.indexOf(c),1)};return a}]);
angular.module("Realize.ui.inlineNotification",["Realize.ui.inlineAlertService"]).directive("inlineNotification",["$log","$timeout","InlineAlertService",function(c,a,e){return{link:function(b,f,d){function j(b){var c=angular.element(i).append(b.alert.msg),e=b.alert.type;a(function(){l=d.inlineNotificationTarget?f.find(d.inlineNotificationTarget):f;f.addClass(e+"Row");f.hasClass("itemRow")||f.parent().addClass(e+"Row");l.prepend(c)},1);a(function(){var a=l.find(".success-message");a.fadeOut(function(){a.remove();
f.removeClass(e+"Row");f.hasClass("itemRow")||f.parent().removeClass(e+"Row")})},g)}var h=b.$eval(d.inlineNotification),l,i='<div class="success-message"></div>',g=4E3;d.$observe("inlineNotification",function(){h=b.$eval(d.inlineNotification)});b.$watch(function(){return e.getAlert(h,!0)},function(a){a&&(c.debug("new alert",a),j(a))})}}}]);
angular.module("Realize.ui.messageBasedAlert",["Realize.ui.paths","Realize.ui.templates","Realize.ui.alertService"]).directive("messageBasedAlert",["$timeout","$rootScope","REALIZE_UI_ROOT_PATH","AlertService",function(c,a,e,b){return{replace:!0,scope:{autoClose:"=",alertMessageDetails:"=",alertOn:"="},templateUrl:e+"/alerts/messageBasedAlert.html",link:function(a,d){var e=function(){a.$apply(function(){a.alertOn=!1;a.alertMessageDetails=null;b.alerts.splice(0,1)})};a.$watch("alertMessageDetails",
function(){a.alertMessageDetails&&a.autoClose&&(d.show(),c(function(){d.fadeOut("slow",e)},5E3))})}}}]);angular.module("Realize.ui.areaLoader",[]).directive("areaLoader",[function(){return{restrict:"EA",replace:!0,template:'<div class="area-loader"><i class="icon-spinner icon-spin"></i></div>'}}]);
angular.module("Realize.ui.checkboxCustom",["Realize.ui.keyCodes"]).directive("checkboxCustom",["$log","KEY_CODES",function(c,a){return{require:"ngModel",template:function(a,b){return['<div class="customCheckbox"><i tabindex="0" class="customCheckboxInput" role="checkbox" aria-labelledby="',b.labelId,'" aria-checked="{{isChecked}}"></i><span id="',b.labelId,'" class="customCheckboxLabel">',b.label,"</span></div>"].join("")},replace:!0,link:function(c,b,f,d){c.isChecked=c.$eval(f.ngModel);var j=b.find("i.customCheckboxInput"),
h=b.find("span.customCheckboxLabel"),l,i,g,k;f.ngDisabled&&f.$observe("ngDisabled",function(a){c.$eval(a)?b.addClass("disabled"):b.removeClass("disabled")});g=f.classOn||"icon-check";k=f.classOff||"icon-check-empty";l=function(a){j.removeClass(a?k:g).addClass(a?g:k)};i=function(a){a&&(a.preventDefault(),a.stopPropagation());if(!c.$eval(f.ngDisabled))c.isChecked=!d.$viewValue,d.$setViewValue(c.isChecked),l(d.$viewValue),c.$apply(function(a){if(f.callback)a[f.callback](f.id,d.$viewValue)})};c.$watch(f.ngModel,
function(a){l(a)});j.click(i);h.click(i);j.keydown(function(b){b.which===a.SPACE&&(b.preventDefault(),i())})}}}]);
angular.module("Realize.ui.dropdownA11y",["Realize.core.services.browserInfo"]).directive("dropdownA11y",["$log","KEY_CODES","$timeout","BrowserInfo",function(c,a,e,b){var f=function(a,b){var c;for(c=1;c<arguments.length;c++)if(a.which===arguments[c])return!0;return!1};return{restrict:"A",link:function(c,j,h){var l=j.next("[role=menu]"),i,g,k,m=function(a){a.focus();k=a},n=function(){i=l.find("a[href], :input");m(i.first())},p=function(a){var c=k.attr("ng-click")||k.parent().attr("ql-click");angular.isDefined(c)&&
(b.browser.isMSIE&&9>=b.browser.msieVersion&&a.preventDefault(),k.scope().$apply(function(){k.scope().$eval(c)}),m(j))},r=c.$eval(h.ddA11yToggleOnly);j.keydown(function(b){var h=f(b,a.DOWN);f(b,a.SPACE,a.ENTER)&&(b.preventDefault(),j.click());h&&(b.preventDefault(),j.parent().hasClass("open")||j.click(),angular.isDefined(c.loadingTools)&&c.loadingTools?c.$watch("loadingTools",function(a){a||e(function(){n()},0)}):n())});l.find("a").attr("tabindex",-1);l.keydown(function(b){switch(b.which){case a.ESC:b.preventDefault();
b.stopPropagation();j.click();m(j);break;case a.UP:if(r)break;b.preventDefault();g=i.index(j.parent().find(":focus"));0===g?m(i.eq(i.length-1)):m(i.eq(g-1));break;case a.DOWN:if(r)break;b.preventDefault();g=i.index(j.parent().find(":focus"));g===i.length-1?m(i.eq(0)):m(i.eq(g+1));break;case a.ENTER:if(r)break;angular.isDefined(k)&&(p(b),e(function(){},0));j.click()}})}}}]);
angular.module("Realize.ui.dropdownToggle",["Realize.ui.dropdownA11y","ui.bootstrap.dropdown","ui.bootstrap.tpls"]).config(["$provide",function(c){c.decorator("dropdownToggleDirective",["$delegate","$document",function(a,c){var b=null,f=angular.noop,d=function(a,d){a.$watch("$location.path",function(){f()});d.parent().bind("click",function(){f()});d.bind("click",function(a){var j=d===b;a.preventDefault();a.stopPropagation();b&&f();j||($(".dropdown.open").removeClass("open"),d.parent().addClass("open"),
d.parent().find(".dropdown-menu").attr({"aria-hidden":"false","aria-expanded":"true"}),b=d,f=function(a){a&&(a.preventDefault(),a.stopPropagation());c.unbind("click",f);d.parent().removeClass("open");d.parent().find(".dropdown-menu").attr({"aria-hidden":"true","aria-expanded":"false"});f=angular.noop;b=null},c.bind("click",f))})};a[0].compile=function(){return d};return a}])}]);
angular.module("Realize.ui.realizeFooter",["Realize.ui.paths","Realize.ui.templates","Realize.core.filters.localize"]).directive("realizeFooter",["REALIZE_UI_ROOT_PATH",function(c){return{restrict:"EA",scope:{BUILD_NUMBER:"@buildNumber",SHOW_BUILD_NUMBER:"=showBuildNumber",CREDITS:"@credits",USER_AGREEMENT:"@userAgreement",PRIVACY_POLICY:"@privacyPolicy"},replace:!0,templateUrl:c+"/footer/realizeFooter.html"}}]);
angular.module("Realize.ui.infoDropdown",["Realize.ui.paths","Realize.ui.templates"]).directive("infoDropdown",["REALIZE_UI_ROOT_PATH",function(c){return{restrict:"EA",replace:!0,transclude:!0,scope:{infoDropdownTitleClosed:"@",infoDropdownTitleOpen:"@",infoDropdownHeader:"@",initialState:"="},templateUrl:c+"/info-dropdown/info-dropdown.html",link:function(a){a.isOpen=!!a.initialState;a.toggleOpen=function(){a.isOpen=!a.isOpen}}}}]);
angular.module("Realize.ui.mediaIcon",["Realize.ui.mediaIconFilter","Realize.core.configs.MEDIA_PATH"]).directive("mediaIcon",["$log","$filter","MEDIA_PATH",function(c,a,e){return{scope:!0,replace:!0,transclude:!0,template:'<div class="mediaIcon with-tab" title="{{ content.$getTitle() }}"><img ng-src="{{ src }}" alt="{{ content.mediaType }}" fallback-strategy="fallback" /><span ng-transclude></span></div>',compile:function(){var b=e+"/skins/default/images",f=b+"/default_icons";return function(d,e,
h){d.content=d.$eval(h.mediaIcon);d.mediaType=a("mediaIcon")(d.content);if(angular.isDefined(d.mediaType)){e.addClass(d.mediaType);var l=b+"/mediatype/icon/",i=e.hasClass("large"),g="tool"===h.type,k=function(){var a=l;i&&(a+="large/");var b=a+d.mediaType+"@2x.png",c;g?(e.removeClass("mediaIcon").removeClass("with-tab"),d.fallback=[f+"/tool@2x.png"],b=d.content.$getThumbnailUrl("TOOL",!1)):(d.content.root?("dropdown"===h.type?(c=f+"/no_program_dropdown@2x.png",b=d.content.$getThumbnailUrl("PROGRAM_SUBNAV")):
"course"===h.type?(c=f+"/no_program_thumb_course@2x.png",b=d.content.$getThumbnailUrl("PROGRAM"),e.removeClass("mediaIcon")):(b=i?"large":"small",c=f+"/no_program_home"+b+"@2x.png",b=d.content.$getThumbnailUrl("HOME",i)),e.removeClass("with-tab")):"etext"===d.mediaType&&"program"===h.type?(c=f+"/no_program_etext@2x.png",b=d.content.$getThumbnailUrl("ETEXT",!1)||c,e.removeClass("with-tab")):("interactive_media"===d.mediaType?b=a+"activity@2x.png":"selected_reading"===d.mediaType||"leveled_reader"===
d.mediaType?b=a+"etext@2x.png":"center"===d.mediaType?(b=i?"_grid":"",b=a+"center@2x.png"):d.content.$isGooruItem&&d.content.$isGooruItem()&&(b=f+"/gooru_icon.png"),c=b,d.content.thumbnailUrls&&d.content.thumbnailUrls.length&&((a=d.content.$getThumbnailUrl("TIER",h.large?d.$eval(h.large):!1))?(b=a,e.removeClass("with-tab").removeClass("mediaIcon").addClass("customImage")):e.hasClass("customImage")&&e.removeClass("customImage").addClass("mediaIcon").addClass("with-tab"))),d.fallback=[c],d.$on("imageFallback",
function(a,b){a.targetScope.content&&!a.targetScope.content.$isGooruItem()&&b.parent().hasClass("customImage")&&b.parent().addClass("mediaIcon with-tab fallback-applied")}));if(!b||b===c)b=d.fallback.shift();0<b.indexOf("@2x")&&d.fallback.unshift(b.replace("@2x",""));d.src=b};k();h.$observe("large",function(a){(i=d.$eval(a))?e.addClass("large"):e.removeClass("large");k()})}else d.content.$isGooruItem&&d.content.$isGooruItem()?d.src=f+"/gooru_icon.png":c.error("Media type is undefined!",d.content)}}}}]);
angular.module("Realize.ui.mediaIconFilter",["Realize.core.filters.underscores"]).filter("mediaIcon",["$filter",function(c){return function(a){if(angular.isDefined(a)&&!(null===a||!angular.isDefined(a.mediaType)||!angular.isDefined(a.fileType))){var e=angular.lowercase(a.mediaType),b=angular.lowercase(a.fileType);if("document"===e){if(-1!==b.indexOf("doc")||-1!==b.indexOf("txt")||-1!==b.indexOf("rtf"))return"document";if(-1!==b.indexOf("ppt"))return"slideshow";if(-1!==b.indexOf("pdf"))return"pdf"}return"Visual Learning"===
a.contentType?"visual_learning":-1!==e.indexOf("remediation")?"lesson":c("underscores")(e)}}}]);
angular.module("Realize.ui.modal",["Realize.ui.templates","Realize.ui.keyCodes","Realize.core.services.messages","Realize.core.configs.LOGOUT_URL","Realize.core.filters.localize"]).factory("ModalGet",["$http","$templateCache","$q","$log",function(c,a,e,b){return function(f){return c.get(f,{cache:a}).then(function(a){b.log("modal http",f);return a.data},function(a){b.warn("[Modal] getModalHtml ERROR: ",a);return e.reject(a)})}}]).factory("Modal",["ModalGet","$compile","$log","$timeout","Messages",
"REALIZE_UI_ROOT_PATH","$q","$rootScope","$window","KEY_CODES",function(c,a,e,b,f,d,j,h,l,i){var g=null,k=$(".modalRegion");c(d+"/modal/modal_progress.html");var m=function(){var a=j.defer();angular.isElement(g)?(g.addClass("hide"),b(function(){g.modal("hide");k.empty();a.resolve();$(".modal-backdrop").remove()},400),$("#skipNav a").attr("tabindex",1),$("#globalNav .section a").attr("tabindex",2),$("#usernameDropdown").attr("tabindex",5),$("#globalSearch #SearchTextInput, #globalSearch button").attr("tabindex",
3),$("#sectionNav a").removeAttr("tabindex",-1),$("#footer a").removeAttr("tabindex",-1),$("#sectionBody a, #sectionBody area, #sectionBody button, #sectionBody input, #sectionBody object, #sectionBody select, #sectionBody textarea").removeAttr("tabindex",-1),$('#skipTarget, div.customCheckbox input[type="checkbox"]').attr("tabindex",-1),$("body").children().removeAttr("aria-hidden","true"),$(".modalRegion").removeAttr("aria-hidden","false"),$(".modal").off("hide")):a.resolve();return a.promise},
n=function(d,h){return c(d).then(function(c){return m().then(function(){g=$(c);k.hide().append(g);h.getMessage=f.getMessage;g.on("shown",function(){a(g)(h);b(function(){"assignmentModal"===g.attr("id")&&0===g.find(".modal-header h1").length?(e.warn("AssignmentModal's scope is destoryed, not displaying modal"),m()):k.show();$(g).find('[auto-focus=""]:visible').focus()},10);$(g).keydown(function(a){a.which===i.ESC&&m()})});g.modal({backdrop:"static",keyboard:!1});$("#skipNav a").attr("tabindex",-1);
$("#globalNav .section a").attr("tabindex",-1);$("#usernameDropdown").attr("tabindex",-1);$("#globalSearch #SearchTextInput, #globalSearch button").attr("tabindex",-1);$("#sectionNav a").attr("tabindex",-1);$("#footer a").attr("tabindex",-1);$("#sectionBody a, #sectionBody area, #sectionBody button, #sectionBody input, #sectionBody object, #sectionBody select, #sectionBody textarea, #sectionBody a").attr("tabindex",-1);$("body").children().attr("aria-hidden","true");$(".modalRegion").attr("aria-hidden",
"false");$(".modal-backdrop").attr("tabindex",-1);$(".quick-list-dropdown .open").removeClass("open");$(g).on("hidden",function(){h.$broadcast("modal.hidden")})},function(a){e.error("error destroying dialog",a);return j.reject(a)})},function(a){e.error("error building dialog",a);return j.reject(a)})},p={OK:"OK",CANCEL:"CANCEL"};return{showDialog:n,hideDialog:function(){return m()},progressDialog:function(a,c){angular.forEach(c,function(b,c){a[c]=b});if(angular.isUndefined(a.setProgress))e.log("[[ WARNING ]] progress-modal expecting a setProgress method, none found"),
a.setProgress=function(b){a.progressPercent=b};if(angular.isUndefined(a.progressPercent))a.progressPercent=0;if(angular.isUndefined(a.progressIncrement))a.progressIncrement=10;var f,h;a.fakeProgress=function(c){f=c||100;b(function t(){0<100-(a.progressPercent+a.progressIncrement)&&(a.setProgress(a.progressPercent+a.progressIncrement),h=b(t,f))},f)};a.progressComplete=function(c){h&&b.cancel(h);c=c||1E3;a.setProgress(100);return{then:function(a){b(a,c)}}};var g=n(d+"/modal/modal_progress.html",a);
g.then(function(){return a},function(a){e.error("error building progress dialog",a);return j.reject(a)});a.then=function(b){g.then(b);return a};a.close=function(){m()};return a},toolDialog:function(a,b,c){b=angular.copy(b);b.pages=b.previews||[];if(c)b.title=f.getCode(c);var e=a.$new(!0);e.selectedTool=b;e.currentPage=1;e.close=function(){m().then(function(){e.$destroy()})};e.download=function(a,b){a.stopPropagation();a.preventDefault();0<=b.restrictedDownloadContent.search(/download/gi)&&l.open(b.attachments[0].downloadURL,
"_blank")};return n(d+"/modal/tool_popup_modal.html",e)},simpleDialog:function(a,b,c,e){var e=e||{},g=h.$new(!0),i=function(){m().then(function(){g.$destroy()})},l=j.defer(),k=l.promise,q=[],s=!1;if(angular.isDefined(c)&&angular.isObject(c)){var o=c[p.OK];(c=c[p.CANCEL])&&o?k=k.then(o.handler,c.handler):c?k=k.then(null,c.handler):o&&(s=!0,k=k.then(o.handler,null));c&&q.push({title:c.title?f.getMessageOrDefault(c.title,c.title):f.getMessageOrDefault("Cancel","Cancel"),isDefault:!!c.isDefault,clickHandler:function(){l.reject()}});
o&&q.push({title:o.title?f.getMessageOrDefault(o.title,o.title):f.getMessageOrDefault("Ok","Ok"),isDefault:!!o.isDefault,clickHandler:function(){l.resolve()}})}else s=!0,q.push({title:f.getMessageOrDefault("OK","OK"),isDefault:!0,clickHandler:function(){l.resolve()}});k.then(i,i);if(angular.isDefined(e.id))g.dialogId=e.id;g.title=f.getMessageOrDefault(a,a);g.body=f.getMessageOrDefault(b,b);g.closeBtnClickHandler=s?l.resolve:l.reject;g.buttons=q;g.isClosable=angular.isDefined(e.isClosable)?e.isClosable:
!0;return n(d+"/modal/simple_dialog.html",g)},BUTTONS:p}}]).factory("SessionTimeoutModal",["$rootScope","Modal","$window","LOGOUT_URL","REALIZE_UI_ROOT_PATH",function(c,a,e,b,f){var d=f+"/modal/session_timeout_dialog.html",j=function(){e.location.href=b};return{showDialog:function(){var b=c.$new();b.close=function(b){b.stopPropagation();b.preventDefault();a.hideDialog()};b.$on("modal.hidden",j);return a.showDialog(d,b)},setTemplate:function(a){d=a},setOnHidden:function(a){j=a}}}]);
angular.module("Realize.ui.numberIcon",[]).directive("numberIcon",[function(){return{restrict:"EA",transclude:!0,replace:!0,template:'<span class="number-icon"><span class="number-icon-number" ng-transclude></span></span>'}}]);
angular.module("Realize.ui.paginatorStats",["Realize.ui.paths","Realize.ui.templates","Realize.core.filters.localize"]).directive("paginatorStats",["REALIZE_UI_ROOT_PATH",function(c){return{restrict:"EA",templateUrl:c+"/paginator/paginator-stats.dir.html",replace:!1,scope:{total:"=",page:"=",limit:"="},link:function(a){a.$watch("total + page + limit",function(){var c=parseInt(a.total,10),b=parseInt(a.page,10),f=parseInt(a.limit,10);a.viewStartAt=(b-1)*f+1;a.viewEndAt=Math.min(b*f,c);a.viewTotal=c})}}}]);
angular.module("Realize.ui.paginator",["Realize.ui.paths","Realize.ui.templates"]).directive("paginator",["REALIZE_UI_ROOT_PATH",function(c){return{scope:{page:"=",total:"@",limit:"@",range:"@",isToScrollUp:"@",scrollTarget:"="},replace:!1,templateUrl:c+"/paginator/paginator.dir.html",controller:["$scope","$element","$attrs","$timeout",function(a,c){a.setPage=function(b){if(!c.attr("disabled"))a.$emit("paginator.onBeforePageChange",b,a.page).defaultPrevented?a.$emit("paginator.pageChangePrevented",
b,a.page):(a.page=b,a.isToScrollUp&&$("html, body").animate({scrollTop:a.scrollTarget&&a.scrollTarget.offset()?a.scrollTarget.offset().top:0}),a.$emit("paginator.pageChangeSuccess",b))};a.goFirst=function(){a.setPage(1)};a.goLast=function(){a.setPage(a.totalPages)};a.goNext=function(){a.setPage(a.page+1)};a.goPrevious=function(){a.setPage(a.page-1)};a.$on("paginator.page.changed",function(b,c){a.setPage(c)});a.$watch("total + page",function(){if(!isNaN(a.total)&&!isNaN(a.limit)&&!isNaN(a.page)){a.totalPages=
parseInt(Math.ceil(a.total/a.limit),10);var b;b=a.page;var c=a.totalPages,d=1;if(10<c&&(d=b-Math.floor(5),10>b||b>c-10))b>c-Math.ceil(5)?d=c-10:b<Math.ceil(5)&&(d=1);b=_.range(d||1,Math.min(d+10,c)+1);a.visibleRange=b}})}]}}]);angular.module("Realize.ui.qlClick",[]).directive("qlClick",["$parse",function(c){return{link:function(a,e,b){var f=c(b.qlClick);e.on("click",function(b){f(a.$parent,{$event:b});!a.$$phase&&!a.$root.$$phase&&a.$apply()})}}}]);
angular.module("Realize.ui.quickLink",[]).directive("quickLink",["$log",function(){return{template:'<li class="quick-link"><a href="javascript://"><i class="icon-{{ icon }}"></i>{{ text }}</a></li>',replace:!0,scope:!0,link:function(c,a,e){"menu"===a.parent().attr("role")&&a.find("a").attr("role","menuitem");e.$observe("href",function(){""!==e.href&&(a.find("a").attr("href",e.href),e.target&&a.find("a").attr("target",e.target))});c.hidden=c.$eval(e.ngHide)||angular.isDefined(e.ngShow)?!c.$eval(e.ngShow):
!1;c.icon=e.icon;c.$watch(e.text,function(a){c.text=a});c.$watch(e.ngHide,function(b,f){if(angular.isDefined(b)&&b!==f)c.hidden=!!b,a.parent().trigger("quicklinkDisplayChange")});c.$watch(e.ngShow,function(b,f){if(angular.isDefined(b)&&b!==f)c.hidden=!b,a.parent().trigger("quicklinkDisplayChange")})}}}]);
angular.module("Realize.ui.quickLinkMenu",[]).directive("quickLinkMenu",["$log",function(){return{template:'<li><a ng-click="toggleClick($event);" class="dropdown-toggle" role="button" dropdown-a11y href="javascript://"><i class="icon-{{ toggleIcon }}"></i>{{ toggleText }}<i class="icon-caret-{{ toggleDirection }}"></i></a><ul class="dropdown-menu pull-right quick-link-menu-items" role="menu" ng-transclude></ul></li>',replace:!0,scope:!0,transclude:!0,link:function(c,a,e){var b=c.$eval(e.quickLinkMenu);
c.toggleIcon=b.icon;c.toggleText=b.text;c.toggleDirection=b.direction;c.toggleClick=function(a){b.toggleClick&&angular.isFunction(b.toggleClick)&&b.toggleClick.call(null,a)};c.toggleIcon||a.find("> a i:first").remove();var f=a.find(".quick-link-menu-items").children();c.$on("collapse",function(){a.after(f);a.hide()});c.$on("expand",function(){a.find(".quick-link-menu-items").append(f);a.css("display","inline-block")})}}}]);
angular.module("Realize.ui.quickList",[]).directive("quickList",["$log","$parse","$compile",function(c,a,e){return{restrict:"AE",template:'<ul class="quicklinks" ng-transclude></ul>',replace:!0,transclude:!0,controller:["$scope","$element",function(a,c){var d=this;d.$visibleChildCount=0;d.$calcVisibleChildren=function(){d.$visibleChildCount=0;angular.forEach(c.children(".quick-link"),function(a){!1===angular.element(a).scope().hidden&&d.$visibleChildCount++})}}],link:function(b,c,d,j){function h(){var a=
$(m);e(a)(b);c.after(a).removeClass("quicklinks").addClass("dropdown-menu").appendTo(a.find("li"));n=!0;b.$broadcast("collapse")}function l(){var a=c.parents("ul.quick-list-dropdown");0<a.length&&(a.after(c),a.remove(),c.removeClass("dropdown-menu").addClass("quicklinks"));n=!1;b.$broadcast("expand")}b.menuDirection=b.$eval(d.isdropup)?"dropup":"dropdown";b.caretDirection=b.$eval(d.isdropup)?"icon-caret-up":"icon-caret-down";var i=angular.isDefined(d.e2eId)?' data-e2e-id="'+d.e2eId+'"':"",g=angular.isDefined(d.ngShow)?
' ng-show="'+d.ngShow+'"':"",k=angular.isDefined(d.ngHide)?' ng-hide="'+d.ngHide+'"':"",m=['<ul class="quick-list-dropdown quicklinks"'+g+k+">",'<li class="quick-list-dropdown-trigger {{ menuDirection }}"'+i+">",'<a href="javascript://" class="dropdown-toggle" data-toggle="dropdown" role="button"><i class="icon-',d.collapsedIcon,'"></i>',d.collapsedLabel,'<i class="{{ caretDirection }}"></i></a></li></ul>'].join(""),n=!1;b.$watch(d.isdropup,function(a,c){if(!(angular.isDefined(a)&&a===c))b.menuDirection=
a?"dropup":"dropdown",b.caretDirection=a?"icon-caret-up":"icon-caret-down"});j.$calcVisibleChildren();c.on("quicklinkDisplayChange",function(){var b=a(d.collapsed);j.$calcVisibleChildren();1>=j.$visibleChildCount?l():b()&&h()});b.$watch(d.collapsed,function(a,b){!angular.isUndefined(a)&&!angular.isUndefined(b)&&(j.$calcVisibleChildren(),!n&&a&&1<j.$visibleChildCount?h():n&&l())})}}}]);
angular.module("Realize.ui").run(["$templateCache","REALIZE_UI_ROOT_PATH",function(c,a){c.put(a+"/modal/tool_popup_modal.html",'<div id="toolPopupModal" class="modal" role="dialog" tabindex="0" aria-describedby="toolPopupModalContent" aria-labelledby="toolPopupModalTitle"><div class="modal-header"><div class="header clearfix"><h1 id="toolPopupModalTitle" class="pull-left" role="heading">{{selectedTool.$getTitle();}}</h1><a href="javascript://" class="close pull-right" ng-click="close()"><i class="icon-remove"></i><span class="a11yOffScreen">{{getMessage("global.modal.close.a11y")}}</span></a></div><div id="toolPopupModalContent" class="content-navbar"><div class="content-navbar-inner clearfix"><div quick-list class="cv"><br quick-link ql-click="download($event, selectedTool)" ng-show="(selectedTool.restrictedDownloadContent | contains:\'download\') && !isIDevice" class="pull-right no-margin download-link" icon="download-alt" text="getMessage(\'program.tools.action.download\')"></div></div></div></div><div class="modal-body noPadding"><div doc-player="selectedTool.pages" doc-type="selectedTool.fileType" page="currentPage" offset-y="-50" scroll-speed="1"></div></div></div>');
c.put(a+"/modal/session_timeout_dialog.html",'<div id="sessionTimeoutDialog" class="modal" role="dialog" tabindex="0" aria-labelledby="sessionTimeoutDialogTitle"><div class="modal-header clearfix"><h1 class="pull-left" id="sessionTimeoutTitle" role="heading"> {{"global.sessionTimeout.title" | localize}} </h1><a href="javascript://" class="close pull-right" ng-click="close($event)" auto-focus><i class="icon-remove"></i><span class="a11yOffScreen">{{"global.modal.close.a11y" | localize}}</span></a></div><div id="sessionTimeoutDialogContent" class="modal-body"><p> {{"global.sessionTimeout.message" | localize}} </p></div><div class="modal-footer"><div class="pull-right"><button class="margin-left pull-left" ng-click="close($event)"> {{"global.sessionTimeout.action.continue" | localize}} </button></div></div></div>');
c.put(a+"/modal/simple_dialog.html",'<div id="{{dialogId || \'simpleDialog\'}}" class="modal" role="dialog" tabindex="0" aria-describedby="dialogContent" aria-labelledby="dialogTitle"><div class="modal-header"><h1 id="dialogTitle" class="pull-left" role="heading">{{title}}</h1><a ng-if="isClosable" href="javascript://" class="close pull-right" ng-click="closeBtnClickHandler()" auto-focus><i class="icon-remove"></i><span class="a11yOffScreen">{{getMessage("global.modal.close.a11y")}}</span></a></div><div id="dialogContent" class="modal-body" ng-bind-html-unsafe="body"></div><div class="modal-footer"><div ng-show=\'isDismissible\' class="pull-left"><input type="checkbox" checkbox-custom name="isDismissed" id="isDismissed" ng-model="dismissed"/><label for="isDismissed">{{getMessage("global.modal.dismissable.message")}}</label></div><div class="pull-right"><button ng-repeat="button in buttons" class="margin-left pull-left" ng-class="{\'secondary\': !button.isDefault}" ng-click="button.clickHandler($event)">{{button.title}}</button></div></div></div>');
c.put(a+"/modal/modal_progress.html",'<div id="{{dialogId || \'progressDialog\'}}" class="modal" role="dialog" tabindex="0" aria-describedby="dialogContent" aria-labelledby="dialogTitle"><div class="modal-header"><h1 id="dialogTitle" role="heading"><span>{{progressHeader}}</span><a ng-show="progressClosable" class="close pull-right" ng-click="closeProgress()" auto-focus><i class="icon-remove"></i><span class="a11yOffScreen">{{getMessage("global.modal.close.a11y")}}</span></a></h1></div><div id="dialogContent" class="modal-body"><h2 class="info"><p>{{progressMessage}}</p></h2><div class="progress"><div class="bar" ng-style="{width: progressPercent + \'%\'}">{{progressPercent}}%</div></div></div></div>');
c.put(a+"/footer/realizeFooter.html",'<div id="footer" role="contentinfo"><div id="footer-inner" class="clearfix"><span id="footer-text" class="pull-left"> {{"footer.copyright.copyright" | localize}} &copy; Pearson Education, Inc. {{"footer.copyright.affiliates" | localize}}. {{"footer.copyright.allRightsReserved" | localize}}. <a href="{{USER_AGREEMENT}}" target="_blank">{{"footer.userAgreement" | localize}}</a> &nbsp;|&nbsp;<a href="{{PRIVACY_POLICY}}" target="_blank">{{"footer.privacyPolicy" | localize}}</a><span ng-if="CREDITS">&nbsp;|&nbsp;<a href="{{CREDITS}}" target="_blank">{{"footer.credits" | localize}}</a></span><span ng-if="SHOW_BUILD_NUMBER">&nbsp;|&nbsp;rev. {{BUILD_NUMBER}}</span></span><div class="pearson-logo pull-right"></div></div></div>');
c.put(a+"/typeahead/typeahead-popup.html",'<div class="dropdown clearfix" ng-class="{open: isOpen()}"><ul class="typeahead dropdown-menu"><li ng-repeat="match in matches" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)"><a tabindex="-1" typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></a></li></ul></div>');c.put(a+"/alerts/messageBasedAlert.html",'<div><div class="alert alert-{{alertMessageDetails.type}} fade in" ng-show="alertOn"><div class="icon-container"><i class="icon-{{alertMessageDetails.icon}}"></i></div><div class="message-container"><span ng-bind-html="alertMessageDetails.msg"></span></div></div></div>');
c.put(a+"/alerts/firstVisitAlert.html",'<div class="firstVisitInfo clearfix"><div class="icon" title="{{title}}"></div><a href="javascript://" class="close pull-right" ng-click="closeFn($event)"><i class="icon-remove"></i><span class="a11yOffScreen">{{"global.modal.close.a11y" | localize}}</span></a><div class="info" title="{{title}}"><h1>{{title}}</h1><p ng-bind-html="description"></p></div></div>');c.put(a+"/info-dropdown/info-dropdown.html",'<div class="info-dropdown" ng-class="{\'dropdown-open\': isOpen}"><div class="info-dropdown-toolbar clearfix"><div class="info-dropdown-header" ng-show="isOpen"><h2>{{infoDropdownHeader}}</h2></div><div class="info-dropdown-button" ng-click="toggleOpen()"><a href="javascript://"><i class="icon icon-info-sign"></i><span class="info-dropdown-text" ng-if="isOpen">{{infoDropdownTitleOpen}}</span><span class="info-dropdown-text" ng-if="!isOpen">{{infoDropdownTitleClosed}}</span></a></div></div><div class="info-dropdown-content animate-show-fade" ng-transclude ng-show="isOpen"></div></div>');
c.put(a+"/paginator/paginator.dir.html",'<div ng-hide="totalPages <= 1" class="pagination"><ul><li data-e2e-id="firstPage" ng-click="goFirst()" ng-if="page> 1"><a href="javascript://">\u00ab</a></li><li data-e2e-id="previousPage" ng-click="goPrevious()" ng-if="page> 1"><a href="javascript://">&lt;</a></li><li data-e2e-id="pageNum" ng-repeat="num in visibleRange" ng-class="{active: num === page}" ng-click="setPage(num)"><a href="javascript://">{{num}}</a></li><li data-e2e-id="nextPage" ng-click="goNext()" ng-class="{disabled: page === totalPages}"><a href="javascript://">&gt;</a></li><li data-e2e-id="lastPage" ng-click="goLast()" ng-class="{disabled: page === totalPages}"><a href="javascript://">\u00bb</a></li></ul></div>');
c.put(a+"/paginator/paginator-stats.dir.html","<span ng-show=\"viewStartAt + viewEndAt + total\">{{'customerAdminTools.pagination.stats' | localize: [viewStartAt, viewEndAt, total]}}</span>")}]);
angular.module("Realize.ui.tokenEnabledSrc",[]).directive("tokenEnabledSrc",["$q","$http",function(c,a){return{restrict:"A",priority:-1,link:function(e,b,f){f.$observe("tokenEnabledSrc",function(b){var e;if(b)0<=b.search("{IPAD_TOKEN}")?(e=f.ipadTokenUrl,e=a.get(e).then(function(a){return b.replace("{IPAD_TOKEN}",a.data)})):e=c.when(b),e.then(function(a){f.$set("src",a)})})}}}]);
angular.module("Realize.ui.typeahead",["ui.bootstrap.typeahead","ui.bootstrap.tpls","Realize.core.services.messages","Realize.ui.paths","Realize.ui.templates"]).config(["$provide",function(c){c.decorator("typeaheadDirective",["$delegate",function(a){var c=a[0];c.priority=-1;var b=c.link;c.compile=function(){return function(a,c,e,h){var l=a.$eval(e.typeaheadCloseOnTab);angular.isDefined(l)&&$(c).bind("keydown",function(b){if(9===b.which)b.stopImmediatePropagation(),$("[typeahead-popup]").scope().matches=
[],$("[typeahead-popup]").scope().active=-1,a.$digest()});c.bind("focus",function(){h.$setViewValue(h.$viewValue)});b.apply(this,arguments)}};return a}]);c.decorator("typeaheadPopupDirective",["$delegate","REALIZE_UI_ROOT_PATH","$log",function(a){var c=a[0],b=c.link;c.compile=function(){return function(a,c,e){b.apply(this,arguments);var h=$(".typeahead.dropdown-menu"),l=a.$eval(e.typeaheadScrollDownInterval)||3,i,g,k;a.$watch("active",function(b,c){i=b>c&&0===b%l;g=b<c;k=b===a.matches.length-1;(i||
g||k)&&h.scrollTo("li:eq("+b+"):has(a.kb-mode)",0,{axis:"y"})});a.isOpen=function(){var b=0<a.matches.length;b||a.$emit("typeaheadPopup.noMatches");return b}}};return a}]);c.decorator("typeaheadMatchDirective",["$delegate","Messages",function(a,c){var b=a[0],f=b.link;b.compile=function(){return function(a){f.apply(this,arguments);a.Messages=c}};return a}])}]);angular.module("Realize.ui").run(["$templateCache","REALIZE_UI_ROOT_PATH",function(c,a){c.put(a+"/modal/tool_popup_modal.html",'<div id="toolPopupModal" class="modal" role="dialog" tabindex="0" aria-describedby="toolPopupModalContent" aria-labelledby="toolPopupModalTitle"><div class="modal-header"><div class="header clearfix"><h1 id="toolPopupModalTitle" class="pull-left" role="heading">{{selectedTool.$getTitle();}}</h1><a href="javascript://" class="close pull-right" ng-click="close()"><i class="icon-remove"></i><span class="a11yOffScreen">{{getMessage("global.modal.close.a11y")}}</span></a></div><div id="toolPopupModalContent" class="content-navbar"><div class="content-navbar-inner clearfix"><div quick-list class="cv"><br quick-link ql-click="download($event, selectedTool)" ng-show="(selectedTool.restrictedDownloadContent | contains:\'download\') && !isIDevice" class="pull-right no-margin download-link" icon="download-alt" text="getMessage(\'program.tools.action.download\')"></div></div></div></div><div class="modal-body noPadding"><div doc-player="selectedTool.pages" doc-type="selectedTool.fileType" page="currentPage" offset-y="-50" scroll-speed="1"></div></div></div>');
c.put(a+"/modal/session_timeout_dialog.html",'<div id="sessionTimeoutDialog" class="modal" role="dialog" tabindex="0" aria-labelledby="sessionTimeoutDialogTitle"><div class="modal-header clearfix"><h1 class="pull-left" id="sessionTimeoutTitle" role="heading"> {{"global.sessionTimeout.title" | localize}} </h1><a href="javascript://" class="close pull-right" ng-click="close($event)" auto-focus><i class="icon-remove"></i><span class="a11yOffScreen">{{"global.modal.close.a11y" | localize}}</span></a></div><div id="sessionTimeoutDialogContent" class="modal-body"><p> {{"global.sessionTimeout.message" | localize}} </p></div><div class="modal-footer"><div class="pull-right"><button class="margin-left pull-left" ng-click="close($event)"> {{"global.sessionTimeout.action.continue" | localize}} </button></div></div></div>');
c.put(a+"/modal/simple_dialog.html",'<div id="{{dialogId || \'simpleDialog\'}}" class="modal" role="dialog" tabindex="0" aria-describedby="dialogContent" aria-labelledby="dialogTitle"><div class="modal-header"><h1 id="dialogTitle" class="pull-left" role="heading">{{title}}</h1><a ng-if="isClosable" href="javascript://" class="close pull-right" ng-click="closeBtnClickHandler()" auto-focus><i class="icon-remove"></i><span class="a11yOffScreen">{{getMessage("global.modal.close.a11y")}}</span></a></div><div id="dialogContent" class="modal-body" ng-bind-html-unsafe="body"></div><div class="modal-footer"><div ng-show=\'isDismissible\' class="pull-left"><input type="checkbox" checkbox-custom name="isDismissed" id="isDismissed" ng-model="dismissed"/><label for="isDismissed">{{getMessage("global.modal.dismissable.message")}}</label></div><div class="pull-right"><button ng-repeat="button in buttons" class="margin-left pull-left" ng-class="{\'secondary\': !button.isDefault}" ng-click="button.clickHandler($event)">{{button.title}}</button></div></div></div>');
c.put(a+"/modal/modal_progress.html",'<div id="{{dialogId || \'progressDialog\'}}" class="modal" role="dialog" tabindex="0" aria-describedby="dialogContent" aria-labelledby="dialogTitle"><div class="modal-header"><h1 id="dialogTitle" role="heading"><span>{{progressHeader}}</span><a ng-show="progressClosable" class="close pull-right" ng-click="closeProgress()" auto-focus><i class="icon-remove"></i><span class="a11yOffScreen">{{getMessage("global.modal.close.a11y")}}</span></a></h1></div><div id="dialogContent" class="modal-body"><h2 class="info"><p>{{progressMessage}}</p></h2><div class="progress"><div class="bar" ng-style="{width: progressPercent + \'%\'}">{{progressPercent}}%</div></div></div></div>');
c.put(a+"/footer/realizeFooter.html",'<div id="footer" role="contentinfo"><div id="footer-inner" class="clearfix"><span id="footer-text" class="pull-left"> {{"footer.copyright.copyright" | localize}} &copy; Pearson Education, Inc. {{"footer.copyright.affiliates" | localize}}. {{"footer.copyright.allRightsReserved" | localize}}. <a href="{{USER_AGREEMENT}}" target="_blank">{{"footer.userAgreement" | localize}}</a> &nbsp;|&nbsp;<a href="{{PRIVACY_POLICY}}" target="_blank">{{"footer.privacyPolicy" | localize}}</a><span ng-if="CREDITS">&nbsp;|&nbsp;<a href="{{CREDITS}}" target="_blank">{{"footer.credits" | localize}}</a></span><span ng-if="SHOW_BUILD_NUMBER">&nbsp;|&nbsp;rev. {{BUILD_NUMBER}}</span></span><div class="pearson-logo pull-right"></div></div></div>');
c.put(a+"/typeahead/typeahead-popup.html",'<div class="dropdown clearfix" ng-class="{open: isOpen()}"><ul class="typeahead dropdown-menu"><li ng-repeat="match in matches" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)"><a tabindex="-1" typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></a></li></ul></div>');c.put(a+"/alerts/messageBasedAlert.html",'<div><div class="alert alert-{{alertMessageDetails.type}} fade in" ng-show="alertOn"><div class="icon-container"><i class="icon-{{alertMessageDetails.icon}}"></i></div><div class="message-container"><span ng-bind-html="alertMessageDetails.msg"></span></div></div></div>');
c.put(a+"/alerts/firstVisitAlert.html",'<div class="firstVisitInfo clearfix"><div class="icon" title="{{title}}"></div><a href="javascript://" class="close pull-right" ng-click="closeFn($event)"><i class="icon-remove"></i><span class="a11yOffScreen">{{"global.modal.close.a11y" | localize}}</span></a><div class="info" title="{{title}}"><h1>{{title}}</h1><p ng-bind-html="description"></p></div></div>');c.put(a+"/info-dropdown/info-dropdown.html",'<div class="info-dropdown" ng-class="{\'dropdown-open\': isOpen}"><div class="info-dropdown-toolbar clearfix"><div class="info-dropdown-header" ng-show="isOpen"><h2>{{infoDropdownHeader}}</h2></div><div class="info-dropdown-button" ng-click="toggleOpen()"><a href="javascript://"><i class="icon icon-info-sign"></i><span class="info-dropdown-text" ng-if="isOpen">{{infoDropdownTitleOpen}}</span><span class="info-dropdown-text" ng-if="!isOpen">{{infoDropdownTitleClosed}}</span></a></div></div><div class="info-dropdown-content animate-show-fade" ng-transclude ng-show="isOpen"></div></div>');
c.put(a+"/paginator/paginator.dir.html",'<div ng-hide="totalPages <= 1" class="pagination"><ul><li data-e2e-id="firstPage" ng-click="goFirst()" ng-if="page> 1"><a href="javascript://">\u00ab</a></li><li data-e2e-id="previousPage" ng-click="goPrevious()" ng-if="page> 1"><a href="javascript://">&lt;</a></li><li data-e2e-id="pageNum" ng-repeat="num in visibleRange" ng-class="{active: num === page}" ng-click="setPage(num)"><a href="javascript://">{{num}}</a></li><li data-e2e-id="nextPage" ng-click="goNext()" ng-class="{disabled: page === totalPages}"><a href="javascript://">&gt;</a></li><li data-e2e-id="lastPage" ng-click="goLast()" ng-class="{disabled: page === totalPages}"><a href="javascript://">\u00bb</a></li></ul></div>');
c.put(a+"/paginator/paginator-stats.dir.html","<span ng-show=\"viewStartAt + viewEndAt + total\">{{'customerAdminTools.pagination.stats' | localize: [viewStartAt, viewEndAt, total]}}</span>")}]);angular.module("Realize.ui.tokenEnabledSrc",[]).directive("tokenEnabledSrc",["$q","$http",function(c,a){return{restrict:"A",priority:-1,link:function(e,b,f){f.$observe("tokenEnabledSrc",function(b){var e;if(b)0<=b.search("{IPAD_TOKEN}")?(e=f.ipadTokenUrl,e=a.get(e).then(function(a){return b.replace("{IPAD_TOKEN}",a.data)})):e=c.when(b),e.then(function(a){f.$set("src",a)})})}}}]);angular.module("Realize.ui.typeahead",["ui.bootstrap.typeahead","ui.bootstrap.tpls","Realize.core.services.messages","Realize.ui.paths","Realize.ui.templates"]).config(["$provide",function(c){c.decorator("typeaheadDirective",["$delegate",function(a){var c=a[0];c.priority=-1;var b=c.link;c.compile=function(){return function(a,c,e,h){var l=a.$eval(e.typeaheadCloseOnTab);angular.isDefined(l)&&$(c).bind("keydown",function(b){if(9===b.which)b.stopImmediatePropagation(),$("[typeahead-popup]").scope().matches=
[],$("[typeahead-popup]").scope().active=-1,a.$digest()});c.bind("focus",function(){h.$setViewValue(h.$viewValue)});b.apply(this,arguments)}};return a}]);c.decorator("typeaheadPopupDirective",["$delegate","REALIZE_UI_ROOT_PATH","$log",function(a){var c=a[0],b=c.link;c.compile=function(){return function(a,c,e){b.apply(this,arguments);var h=$(".typeahead.dropdown-menu"),l=a.$eval(e.typeaheadScrollDownInterval)||3,i,g,k;a.$watch("active",function(b,c){i=b>c&&0===b%l;g=b<c;k=b===a.matches.length-1;(i||
g||k)&&h.scrollTo("li:eq("+b+"):has(a.kb-mode)",0,{axis:"y"})});a.isOpen=function(){var b=0<a.matches.length;b||a.$emit("typeaheadPopup.noMatches");return b}}};return a}]);c.decorator("typeaheadMatchDirective",["$delegate","Messages",function(a,c){var b=a[0],f=b.link;b.compile=function(){return function(a){f.apply(this,arguments);a.Messages=c}};return a}])}]);;angular.module('Realize.ui')
    .run(['$templateCache', 'REALIZE_UI_ROOT_PATH', function(templateCache, templateRoot) {
            templateCache.put(templateRoot + "/modal/tool_popup_modal.html", "<div id=\"toolPopupModal\" class=\"modal\" role=\"dialog\" tabindex=\"0\" aria-describedby=\"toolPopupModalContent\" aria-labelledby=\"toolPopupModalTitle\"><div class=\"modal-header\"><div class=\"header clearfix\"><h1 id=\"toolPopupModalTitle\" class=\"pull-left\" role=\"heading\">{{selectedTool.$getTitle();}}</h1><a href=\"javascript://\" class=\"close pull-right\" ng-click=\"close()\"><i class=\"icon-remove\"></i><span class=\"a11yOffScreen\">{{getMessage(\"global.modal.close.a11y\")}}</span></a></div><div id=\"toolPopupModalContent\" class=\"content-navbar\"><div class=\"content-navbar-inner clearfix\"><div quick-list class=\"cv\"><br quick-link ql-click=\"download($event, selectedTool)\" ng-show=\"(selectedTool.restrictedDownloadContent | contains:'download') && !isIDevice\" class=\"pull-right no-margin download-link\" icon=\"download-alt\" text=\"getMessage('program.tools.action.download')\"></div></div></div></div><div class=\"modal-body noPadding\"><div doc-player=\"selectedTool.pages\" doc-type=\"selectedTool.fileType\" page=\"currentPage\" offset-y=\"-50\" scroll-speed=\"1\"></div></div></div>");
            templateCache.put(templateRoot + "/modal/session_timeout_dialog.html", "<div id=\"sessionTimeoutDialog\" class=\"modal\" role=\"dialog\" tabindex=\"0\" aria-labelledby=\"sessionTimeoutDialogTitle\"><div class=\"modal-header clearfix\"><h1 class=\"pull-left\" id=\"sessionTimeoutTitle\" role=\"heading\"> {{\"global.sessionTimeout.title\" | localize}} </h1><a href=\"javascript://\" class=\"close pull-right\" ng-click=\"close($event)\" auto-focus><i class=\"icon-remove\"></i><span class=\"a11yOffScreen\">{{\"global.modal.close.a11y\" | localize}}</span></a></div><div id=\"sessionTimeoutDialogContent\" class=\"modal-body\"><p> {{\"global.sessionTimeout.message\" | localize}} </p></div><div class=\"modal-footer\"><div class=\"pull-right\"><button class=\"margin-left pull-left\" ng-click=\"close($event)\"> {{\"global.sessionTimeout.action.continue\" | localize}} </button></div></div></div>");
            templateCache.put(templateRoot + "/modal/simple_dialog.html", "<div id=\"{{dialogId || 'simpleDialog'}}\" class=\"modal\" role=\"dialog\" tabindex=\"0\" aria-describedby=\"dialogContent\" aria-labelledby=\"dialogTitle\"><div class=\"modal-header\"><h1 id=\"dialogTitle\" class=\"pull-left\" role=\"heading\">{{title}}</h1><a ng-if=\"isClosable\" href=\"javascript://\" class=\"close pull-right\" ng-click=\"closeBtnClickHandler()\" auto-focus><i class=\"icon-remove\"></i><span class=\"a11yOffScreen\">{{getMessage(\"global.modal.close.a11y\")}}</span></a></div><div id=\"dialogContent\" class=\"modal-body\" ng-bind-html-unsafe=\"body\"></div><div class=\"modal-footer\"><div ng-show='isDismissible' class=\"pull-left\"><input type=\"checkbox\" checkbox-custom name=\"isDismissed\" id=\"isDismissed\" ng-model=\"dismissed\"/><label for=\"isDismissed\">{{getMessage(\"global.modal.dismissable.message\")}}</label></div><div class=\"pull-right\"><button ng-repeat=\"button in buttons\" class=\"margin-left pull-left\" ng-class=\"{'secondary': !button.isDefault}\" ng-click=\"button.clickHandler($event)\">{{button.title}}</button></div></div></div>");
            templateCache.put(templateRoot + "/modal/modal_progress.html", "<div id=\"{{dialogId || 'progressDialog'}}\" class=\"modal\" role=\"dialog\" tabindex=\"0\" aria-describedby=\"dialogContent\" aria-labelledby=\"dialogTitle\"><div class=\"modal-header\"><h1 id=\"dialogTitle\" role=\"heading\"><span>{{progressHeader}}</span><a ng-show=\"progressClosable\" class=\"close pull-right\" ng-click=\"closeProgress()\" auto-focus><i class=\"icon-remove\"></i><span class=\"a11yOffScreen\">{{getMessage(\"global.modal.close.a11y\")}}</span></a></h1></div><div id=\"dialogContent\" class=\"modal-body\"><h2 class=\"info\"><p>{{progressMessage}}</p></h2><div class=\"progress\"><div class=\"bar\" ng-style=\"{width: progressPercent + '%'}\">{{progressPercent}}%</div></div></div></div>");
            templateCache.put(templateRoot + "/footer/realizeFooter.html", "<div id=\"footer\" role=\"contentinfo\"><div id=\"footer-inner\" class=\"clearfix\"><span id=\"footer-text\" class=\"pull-left\"> {{\"footer.copyright.copyright\" | localize}} &copy; Pearson Education, Inc. {{\"footer.copyright.affiliates\" | localize}}. {{\"footer.copyright.allRightsReserved\" | localize}}. <a href=\"{{USER_AGREEMENT}}\" target=\"_blank\">{{\"footer.userAgreement\" | localize}}</a> &nbsp;|&nbsp;<a href=\"{{PRIVACY_POLICY}}\" target=\"_blank\">{{\"footer.privacyPolicy\" | localize}}</a><span ng-if=\"CREDITS\">&nbsp;|&nbsp;<a href=\"{{CREDITS}}\" target=\"_blank\">{{\"footer.credits\" | localize}}</a></span><span ng-if=\"SHOW_BUILD_NUMBER\">&nbsp;|&nbsp;rev. {{BUILD_NUMBER}}</span></span><div class=\"pearson-logo pull-right\"></div></div></div>");
            templateCache.put(templateRoot + "/typeahead/typeahead-popup.html", "<div class=\"dropdown clearfix\" ng-class=\"{open: isOpen()}\"><ul class=\"typeahead dropdown-menu\"><li ng-repeat=\"match in matches\" ng-class=\"{active: isActive($index) }\" ng-mouseenter=\"selectActive($index)\" ng-click=\"selectMatch($index)\"><a tabindex=\"-1\" typeahead-match index=\"$index\" match=\"match\" query=\"query\" template-url=\"templateUrl\"></a></li></ul></div>");
            templateCache.put(templateRoot + "/alerts/messageBasedAlert.html", "<div><div class=\"alert alert-{{alertMessageDetails.type}} fade in\" ng-show=\"alertOn\"><div class=\"icon-container\"><i class=\"icon-{{alertMessageDetails.icon}}\"></i></div><div class=\"message-container\"><span ng-bind-html=\"alertMessageDetails.msg\"></span></div></div></div>");
            templateCache.put(templateRoot + "/alerts/firstVisitAlert.html", "<div class=\"firstVisitInfo clearfix\"><div class=\"icon\" title=\"{{title}}\"></div><a href=\"javascript://\" class=\"close pull-right\" ng-click=\"closeFn($event)\"><i class=\"icon-remove\"></i><span class=\"a11yOffScreen\">{{\"global.modal.close.a11y\" | localize}}</span></a><div class=\"info\" title=\"{{title}}\"><h1>{{title}}</h1><p ng-bind-html=\"description\"></p></div></div>");
            templateCache.put(templateRoot + "/info-dropdown/info-dropdown.html", "<div class=\"info-dropdown\" ng-class=\"{'dropdown-open': isOpen}\"><div class=\"info-dropdown-toolbar clearfix\"><div class=\"info-dropdown-header\" ng-show=\"isOpen\"><h2>{{infoDropdownHeader}}</h2></div><div class=\"info-dropdown-button\" ng-click=\"toggleOpen()\"><a href=\"javascript://\"><i class=\"icon icon-info-sign\"></i><span class=\"info-dropdown-text\" ng-if=\"isOpen\">{{infoDropdownTitleOpen}}</span><span class=\"info-dropdown-text\" ng-if=\"!isOpen\">{{infoDropdownTitleClosed}}</span></a></div></div><div class=\"info-dropdown-content animate-show-fade\" ng-transclude ng-show=\"isOpen\"></div></div>");
            templateCache.put(templateRoot + "/paginator/paginator.dir.html", "<div ng-hide=\"totalPages <= 1\" class=\"pagination\"><ul><li data-e2e-id=\"firstPage\" ng-click=\"goFirst()\" ng-if=\"page> 1\"><a href=\"javascript://\">«</a></li><li data-e2e-id=\"previousPage\" ng-click=\"goPrevious()\" ng-if=\"page> 1\"><a href=\"javascript://\">&lt;</a></li><li data-e2e-id=\"pageNum\" ng-repeat=\"num in visibleRange\" ng-class=\"{active: num === page}\" ng-click=\"setPage(num)\"><a href=\"javascript://\">{{num}}</a></li><li data-e2e-id=\"nextPage\" ng-click=\"goNext()\" ng-class=\"{disabled: page === totalPages}\"><a href=\"javascript://\">&gt;</a></li><li data-e2e-id=\"lastPage\" ng-click=\"goLast()\" ng-class=\"{disabled: page === totalPages}\"><a href=\"javascript://\">»</a></li></ul></div>");
            templateCache.put(templateRoot + "/paginator/paginator-stats.dir.html", "<span ng-show=\"viewStartAt + viewEndAt + total\">{{'customerAdminTools.pagination.stats' | localize: [viewStartAt, viewEndAt, total]}}</span>");
        }]);
;/**
 * token-enabled-src.dir.js - directive for simple loader within an area
 */

angular.module('Realize.ui.tokenEnabledSrc', [])
    .directive('tokenEnabledSrc', ['$q', '$http', function($q, $http) {
        return {
            restrict: 'A',
            priority: -1, // it needs to run after the attributes are interpolated
            link: function(scope, el, attrs) {
                attrs.$observe('tokenEnabledSrc', function(value) {
                    var promise,
                        tokenUrl;

                    if(!value) {
                        return;
                    }

                    // if need to get ipad token, get it
                    if(value.search('{IPAD_TOKEN}') >= 0) {
                        tokenUrl = attrs.ipadTokenUrl;

                        promise = $http.get(tokenUrl).then(function(response) {
                            // Slice to strip beginning and end double quotes
                            return value.replace('{IPAD_TOKEN}', response.data);
                        });
                    } else {
                        promise = $q.when(value);
                    }

                    promise.then(function(finalUrl) {
                        attrs.$set('src', finalUrl);
                    });
                });
            }
        };
    }]);;// this is actually an override of ui.bootstrap's
angular.module('Realize.ui.typeahead', [
    'ui.bootstrap.typeahead',
    'ui.bootstrap.tpls', // TODO: specific template modules?
    'Realize.core.services.messages',
    'Realize.ui.paths',
    'Realize.ui.templates'
])
    .config(['$provide',
        function($provide) {
            $provide.decorator('typeaheadDirective', ['$delegate',
                function($delegate) {
                    var typeahead = $delegate[0];

                    typeahead.priority = -1;

                    var linkOriginal = typeahead.link;

                    typeahead.compile = function() {
                        var linkNew = function(scope, element, attrs, modelCtrl) {
                            var typeaheadPopup = "[typeahead-popup]";

                            //fixes RGHT-10592 - tab should move focus away without selecting item
                            var closeOnTab = scope.$eval(attrs.typeaheadCloseOnTab);
                            if (angular.isDefined(closeOnTab)) {
                                $(element).bind('keydown', function(evt) {
                                    if (evt.which === 9) { //tab(9)
                                        evt.stopImmediatePropagation();
                                        $(typeaheadPopup).scope().matches = [];
                                        $(typeaheadPopup).scope().active = -1;
                                        scope.$digest();
                                    }
                                });
                            }

                            //on focus, open popup with matches
                            element.bind('focus', function() {
                                modelCtrl.$setViewValue(modelCtrl.$viewValue); //triggers getMatches
                                //scope.$apply();
                            });

                            linkOriginal.apply(this, arguments);
                        };

                        return linkNew;
                    };
                    return $delegate;
                }
            ]);

            $provide.decorator('typeaheadPopupDirective', ['$delegate', 'REALIZE_UI_ROOT_PATH', '$log',
                function($delegate, REALIZE_UI_ROOT_PATH, $log) {
                    var typeaheadPopup = $delegate[0];

                    //typeaheadPopup.templateUrl = REALIZE_UI_ROOT_PATH + '/typeahead/typeahead-popup.html';

                    var linkOriginal = typeaheadPopup.link;

                    typeaheadPopup.compile = function() {
                        var linkNew = function(scope, el, attrs) {
                            linkOriginal.apply(this, arguments);

                            var typeaheadDropdown = $('.typeahead.dropdown-menu'),
                                scrollDownInterval = scope.$eval(attrs.typeaheadScrollDownInterval) || 3,
                                hasScrolledDown,
                                hasScrolledUp,
                                hasScrolledToBottom;

                            scope.$watch('active', function(active, oldVal) {
                                hasScrolledDown = active > oldVal && active % scrollDownInterval === 0;
                                hasScrolledUp = active < oldVal;
                                hasScrolledToBottom = active === scope.matches.length - 1;

                                if (hasScrolledDown || hasScrolledUp || hasScrolledToBottom) {
                                    //fixes RGHT-10591 - scroll for keyboard mode
                                    typeaheadDropdown.scrollTo('li:eq(' + active + '):has(a.kb-mode)', 0, {
                                        axis: 'y'
                                    });
                                }
                            });

                            scope.isOpen = function() {
                                var isOpen = scope.matches.length > 0;
                                if (!isOpen) {
                                    scope.$emit('typeaheadPopup.noMatches');
                                }

                                return isOpen;
                            };
                        };

                        return linkNew;
                    };
                    return $delegate;
                }
            ]);

            $provide.decorator('typeaheadMatchDirective', ['$delegate', 'Messages',
                function($delegate, Messages) {
                    var typeaheadMatch = $delegate[0];

                    var linkOriginal = typeaheadMatch.link;

                    typeaheadMatch.compile = function() {
                        var linkNew = function(scope) {
                            linkOriginal.apply(this, arguments);
                            scope.Messages = Messages;
                        };

                        return linkNew;
                    };
                    return $delegate;
                }
            ]);
        }
    ]);